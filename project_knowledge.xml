<?xml version="1.0" ?>
<documents>
  <document index="1">
    <source>generate_project_xml.py</source>
    <document_content>&lt;![CDATA[import os
from pathlib import Path
import xml.etree.ElementTree as ET
from xml.dom import minidom
import fnmatch
import re

# Define allowed extensions at global scope
ALLOWED_EXTENSIONS = {
    '.py', '.js', '.jsx', '.ts', '.tsx',
    '.html', '.css', '.scss', '.sass',
    '.md', '.txt', '.json', '.yaml', '.yml',
    '.xml', '.csv',
    '.sh', '.bash', '.zsh',
    '.sql',
    '.env.example', '.gitignore'
}

def sanitize_xml_content(content: str) -&gt; str:
    &quot;&quot;&quot;Sanitize content for XML by removing invalid characters.&quot;&quot;&quot;
    # Remove invalid XML characters
    def clean_char(c):
        # Keep only valid XML characters
        return c if ord(c) &gt;= 32 or c in '\n\r\t' else ''
    
    # Clean the content character by character
    content = ''.join(clean_char(c) for c in content)
    
    # Handle CDATA sections
    content = f&quot;&lt;![CDATA[{content}]]&gt;&quot;
    
    return content

def should_ignore_file(file_path: Path) -&gt; bool:
    &quot;&quot;&quot;Check if file should be ignored based on common patterns.&quot;&quot;&quot;
    ignore_patterns = {
        'directories': {
            'node_modules', 'public' 'venv', 'env', '__pycache__',
            '.git', '.idea', '.vscode', 'dist', 'build', '.next'
        },
        'extensions': {
            '.pyc', '.pyo', '.pyd', '.so',
            '.log', '.lock',
            '.db', '.sqlite', '.sqlite3',
            '.png', '.jpg', '.jpeg', '.gif', '.ico',
            '.mp3', '.mp4', '.wav', '.avi',
            '.zip', '.tar', '.gz', '.rar'
        },
        'files': {
            '.env', '.gitignore', 'package-lock.json',
            'yarn.lock', 'poetry.lock', '.DS_Store', 'thumbs.db'
        }
    }
    
    for parent in file_path.parents:
        if parent.name in ignore_patterns['directories']:
            print(f&quot;Ignoring file in excluded directory: {file_path}&quot;)
            return True
    
    if file_path.suffix in ignore_patterns['extensions']:
        print(f&quot;Ignoring file with excluded extension: {file_path}&quot;)
        return True
    
    if file_path.name in ignore_patterns['files']:
        print(f&quot;Ignoring specific excluded file: {file_path}&quot;)
        return True
    
    return False

def read_file_content(file_path: Path) -&gt; str:
    &quot;&quot;&quot;Read file content safely, handling different encodings.&quot;&quot;&quot;
    if file_path.suffix not in ALLOWED_EXTENSIONS:
        print(f&quot;Skipping file with unsupported extension: {file_path}&quot;)
        return &quot;&quot;

    max_size = 1_000_000  # 1MB
    if file_path.stat().st_size &gt; max_size:
        print(f&quot;Skipping large file: {file_path}&quot;)
        return f&quot;File too large to include: {file_path}&quot;
    
    encodings = ['utf-8', 'latin-1', 'cp1252', 'ascii']
    
    for encoding in encodings:
        try:
            content = file_path.read_text(encoding=encoding)
            print(f&quot;Successfully read file: {file_path}&quot;)
            return sanitize_xml_content(content)
        except UnicodeDecodeError:
            continue
        except Exception as e:
            print(f&quot;Error reading {file_path}: {e}&quot;)
            return &quot;&quot;
    
    print(f&quot;Failed to read file with any encoding: {file_path}&quot;)
    return &quot;&quot;

def safe_scan_directory(path: Path):
    &quot;&quot;&quot;Safely scan directory and yield accessible files.&quot;&quot;&quot;
    try:
        for item in path.rglob('*'):
            if item.is_file():
                if not should_ignore_file(item):
                    print(f&quot;Found file: {item}&quot;)
                    yield item
    except Exception as e:
        print(f&quot;Error scanning directory {path}: {e}&quot;)

def create_xml_for_project(project_path: str):
    &quot;&quot;&quot;Create XML structure for all files in the project.&quot;&quot;&quot;
    project_path = Path(project_path)
    root = ET.Element(&quot;documents&quot;)
    index = 1
    
    print(f&quot;\nScanning directory: {project_path}&quot;)
    print(&quot;=&quot; * 50)

    for path in safe_scan_directory(project_path):
        try:
            doc = ET.SubElement(root, &quot;document&quot;)
            doc.set(&quot;index&quot;, str(index))
            
            source = ET.SubElement(doc, &quot;source&quot;)
            relative_path = str(path.relative_to(project_path))
            source.text = relative_path
            
            content = ET.SubElement(doc, &quot;document_content&quot;)
            file_content = read_file_content(path)
            if file_content:
                content.text = file_content
                index += 1
                print(f&quot;Processed ({index}): {relative_path}&quot;)
            
        except Exception as e:
            print(f&quot;Error processing {path}: {e}&quot;)

    if index &gt; 1:
        xmlstr = minidom.parseString(ET.tostring(root, encoding='unicode')).toprettyxml(indent=&quot;  &quot;)
        
        output_path = project_path / &quot;project_knowledge.xml&quot;
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(xmlstr)
        
        print(&quot;\nSummary:&quot;)
        print(&quot;=&quot; * 50)
        print(f&quot;XML file created at: {output_path}&quot;)
        print(f&quot;Total files processed: {index - 1}&quot;)
    else:
        print(&quot;\nNo files were processed! Check the following:&quot;)
        print(&quot;1. Are there any files with supported extensions?&quot;)
        print(&quot;2. Are all files being ignored by the filters?&quot;)
        print(&quot;3. Is the project path correct?&quot;)
        print(&quot;\nSupported extensions:&quot;, 
              ', '.join(sorted(ALLOWED_EXTENSIONS)))

if __name__ == &quot;__main__&quot;:
    project_path = input(&quot;Enter the path to your project root: &quot;).strip()
    project_path = os.path.abspath(project_path)
    
    if not os.path.exists(project_path):
        print(f&quot;Error: Path does not exist: {project_path}&quot;)
    else:
        create_xml_for_project(project_path)]]&gt;</document_content>
  </document>
  <document index="2">
    <source>structure.txt</source>
    <document_content>&lt;![CDATA[.
├── README.md
├── docker-compose.yml
├── init-project.sh
├── next.config.ts
├── package-lock.json
├── package.json
├── postcss.config.mjs
├── prisma
│   ├── migrations
│   │   ├── 20241121064523_init
│   │   │   └── migration.sql
│   │   ├── 20241122024113_add_business_model
│   │   │   └── migration.sql
│   │   ├── 20241122024632_add_business_model
│   │   │   └── migration.sql
│   │   └── migration_lock.toml
│   └── schema.prisma
├── public
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── src
│   ├── app
│   │   ├── api
│   │   │   └── auth
│   │   │       ├── [...nextauth]
│   │   │       │   └── route.ts
│   │   │       └── register
│   │   │           ├── business
│   │   │           │   └── route.ts
│   │   │           └── route.ts
│   │   ├── favicon.ico
│   │   ├── fonts
│   │   │   ├── GeistMonoVF.woff
│   │   │   └── GeistVF.woff
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── page.tsx
│   │   └── styles
│   │       └── colors.css
│   ├── components
│   │   ├── BusinessRegistrationModal.tsx
│   │   ├── Button.tsx
│   │   ├── Modal.tsx
│   │   ├── Notification.tsx
│   │   ├── StepIndicator.tsx
│   │   ├── StepTransition.tsx
│   │   └── ui
│   │       ├── checkbox.tsx
│   │       ├── input.tsx
│   │       ├── modal.tsx
│   │       └── select.tsx
│   ├── lib
│   │   ├── auth-utils.ts
│   │   ├── auth.ts
│   │   ├── prisma.ts
│   │   └── utils.ts
│   ├── middleware.ts
│   ├── providers
│   │   └── session-provider.tsx
│   ├── types
│   │   └── forms.ts
│   └── utils
│       └── validation.ts
├── structure.txt
├── tailwind.config.ts
└── tsconfig.json

22 directories, 48 files
]]&gt;</document_content>
  </document>
  <document index="3">
    <source>package.json</source>
    <document_content>&lt;![CDATA[{
  &quot;name&quot;: &quot;huubr&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;next dev&quot;,
    &quot;build&quot;: &quot;next build&quot;,
    &quot;start&quot;: &quot;next start&quot;,
    &quot;lint&quot;: &quot;next lint&quot;
  },
  &quot;dependencies&quot;: {
    &quot;@headlessui/react&quot;: &quot;^2.2.0&quot;,
    &quot;@hookform/resolvers&quot;: &quot;^3.9.1&quot;,
    &quot;@next-auth/prisma-adapter&quot;: &quot;^1.0.7&quot;,
    &quot;@prisma/client&quot;: &quot;^5.22.0&quot;,
    &quot;@radix-ui/react-checkbox&quot;: &quot;^1.1.2&quot;,
    &quot;@react-email/components&quot;: &quot;^0.0.31&quot;,
    &quot;@react-email/render&quot;: &quot;^1.0.3&quot;,
    &quot;@react-oauth/google&quot;: &quot;^0.12.1&quot;,
    &quot;bcryptjs&quot;: &quot;^2.4.3&quot;,
    &quot;clsx&quot;: &quot;^2.1.1&quot;,
    &quot;framer-motion&quot;: &quot;^11.11.17&quot;,
    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,
    &quot;lucide-react&quot;: &quot;^0.460.0&quot;,
    &quot;next&quot;: &quot;15.0.3&quot;,
    &quot;next-auth&quot;: &quot;^4.24.10&quot;,
    &quot;react&quot;: &quot;^18.3.1&quot;,
    &quot;react-dom&quot;: &quot;^18.3.1&quot;,
    &quot;react-hook-form&quot;: &quot;^7.53.2&quot;,
    &quot;react-hot-toast&quot;: &quot;^2.4.1&quot;,
    &quot;resend&quot;: &quot;^4.0.1&quot;,
    &quot;tailwind-merge&quot;: &quot;^2.5.4&quot;,
    &quot;zod&quot;: &quot;^3.23.8&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@types/bcryptjs&quot;: &quot;^2.4.6&quot;,
    &quot;@types/jsonwebtoken&quot;: &quot;^9.0.7&quot;,
    &quot;@types/node&quot;: &quot;^20&quot;,
    &quot;@types/react&quot;: &quot;^18&quot;,
    &quot;@types/react-dom&quot;: &quot;^18&quot;,
    &quot;@types/webpack&quot;: &quot;^5.28.5&quot;,
    &quot;eslint&quot;: &quot;^8&quot;,
    &quot;eslint-config-next&quot;: &quot;15.0.3&quot;,
    &quot;postcss&quot;: &quot;^8&quot;,
    &quot;prisma&quot;: &quot;^5.22.0&quot;,
    &quot;tailwindcss&quot;: &quot;^3.4.1&quot;,
    &quot;typescript&quot;: &quot;^5&quot;
  }
}
]]&gt;</document_content>
  </document>
  <document index="4">
    <source>next-env.d.ts</source>
    <document_content>&lt;![CDATA[/// &lt;reference types=&quot;next&quot; /&gt;
/// &lt;reference types=&quot;next/image-types/global&quot; /&gt;

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
]]&gt;</document_content>
  </document>
  <document index="5">
    <source>init-project.sh</source>
    <document_content>&lt;![CDATA[#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e &quot;${BLUE}Starting Huubr Directory project initialization...${NC}&quot;

# 1. Start Docker containers
echo -e &quot;${BLUE}Starting Docker containers...${NC}&quot;
docker-compose up -d
sleep 5 # Wait for PostgreSQL to start

# 2. Initialize Prisma
echo -e &quot;${BLUE}Initializing Prisma...${NC}&quot;
npx prisma generate
npx prisma migrate dev --name init

# 3. Verify setup
echo -e &quot;${BLUE}Verifying setup...${NC}&quot;
if docker ps | grep -q &quot;huubr-postgres&quot;; then
    echo -e &quot;${GREEN}✓ PostgreSQL is running${NC}&quot;
else
    echo &quot;⨯ PostgreSQL is not running&quot;
    exit 1
fi

# 4. Create prisma client
echo -e &quot;${BLUE}Creating Prisma client...${NC}&quot;
npx prisma generate

echo -e &quot;${GREEN}✓ Project initialization completed!${NC}&quot;
echo -e &quot;${BLUE}You can now start the development server with:${NC}&quot;
echo &quot;npm run dev&quot;]]&gt;</document_content>
  </document>
  <document index="6">
    <source>README.md</source>
    <document_content>&lt;![CDATA[This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&amp;filter=next.js&amp;utm_source=create-next-app&amp;utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


********************************Startup instructions**********************************************

First, make sure you have PostgreSQL running using Docker. Your docker-compose.yml is already configured:

bashCopy# Start PostgreSQL container
docker-compose up -d

Install dependencies (I can see you're using npm from your package.json):

bashCopy
npm install

Set up your environment variables. Create a .env file in your project root:

envCopy# Database
DATABASE_URL=&quot;postgresql://huubr_user:huubr_password@localhost:5432/huubr_db&quot;

# Auth
NEXTAUTH_URL=&quot;http://localhost:3000&quot;
NEXTAUTH_SECRET=&quot;your-secret-key-here&quot; # Generate a random string

# Only needed when implementing social login
# GOOGLE_CLIENT_ID=&quot;&quot;
# GOOGLE_CLIENT_SECRET=&quot;&quot;
# FACEBOOK_APP_ID=&quot;&quot;
# FACEBOOK_APP_SECRET=&quot;&quot;
# APPLE_ID=&quot;&quot;
# APPLE_SECRET=&quot;&quot;

Run Prisma migrations to set up your database:

bashCopynpx prisma generate
npx prisma migrate dev

Start the development server:

bashCopynpm run dev
The application should now be running at http://localhost:3000.
To verify everything is working:

Check if PostgreSQL is running:

bashCopydocker ps
You should see the huubr-postgres container running.

Check Prisma Studio to view/edit your database:

bashCopy
npx prisma studio
This will open a database UI at http://localhost:5555.
Common issues and solutions:

If Docker container fails to start:

bashCopy# Stop the container
docker-compose down

# Remove the volume
docker volume rm huubr_postgres_data

# Start again
docker-compose up -d

If Prisma migration fails:

bashCopy# Reset the database
npx prisma migrate reset

# Run migrations again
npx prisma migrate dev

If dependencies cause issues:

bashCopy# Remove node_modules and reinstall
rm -rf node_modules
npm install
The project structure should look like this:
Huubr/
├── src/
│   ├── app/
│   ├── components/
│   ├── lib/
│   └── ...
├── prisma/
│   ├── schema.prisma
│   └── migrations/
├── .env
├── package.json
├── docker-compose.yml
└── ...]]&gt;</document_content>
  </document>
  <document index="7">
    <source>tailwind.config.ts</source>
    <document_content>&lt;![CDATA[import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: '#FF4D00',
          foreground: '#FFFFFF',
        },
        secondary: {
          DEFAULT: '#A4C639',
          foreground: '#FFFFFF',
        },
        background: '#FFFFFF',
        foreground: '#333333',
        border: '#E5E7EB',
        input: '#E5E7EB',
        ring: '#A4C639',
      },
      keyframes: {
        &quot;accordion-down&quot;: {
          from: { height: '0' },
          to: { height: &quot;var(--radix-accordion-content-height)&quot; },
        },
        &quot;accordion-up&quot;: {
          from: { height: &quot;var(--radix-accordion-content-height)&quot; },
          to: { height: '0' },
        },
      },
      animation: {
        &quot;accordion-down&quot;: &quot;accordion-down 0.2s ease-out&quot;,
        &quot;accordion-up&quot;: &quot;accordion-up 0.2s ease-out&quot;,
      },
    },
  },
  plugins: [],
}
export default config]]&gt;</document_content>
  </document>
  <document index="8">
    <source>docker-compose.yml</source>
    <document_content>&lt;![CDATA[version: '3.8'
services:
  postgres:
    image: postgres:15
    container_name: huubr-postgres
    network_mode: &quot;host&quot;  # Use host networking in WSL
    environment:
      POSTGRES_USER: huubr_user
      POSTGRES_PASSWORD: huubr_password
      POSTGRES_DB: huubr_db
    volumes:
      - huubr_postgres_data:/var/lib/postgresql/data

volumes:
  huubr_postgres_data:]]&gt;</document_content>
  </document>
  <document index="9">
    <source>postcss.config.mjs</source>
    <document_content/>
  </document>
  <document index="9">
    <source>.eslintrc.json</source>
    <document_content>&lt;![CDATA[{
  &quot;extends&quot;: [&quot;next/core-web-vitals&quot;, &quot;next/typescript&quot;]
}
]]&gt;</document_content>
  </document>
  <document index="10">
    <source>tsconfig.json</source>
    <document_content>&lt;![CDATA[{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;ES2017&quot;,
    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;esnext&quot;],
    &quot;allowJs&quot;: true,
    &quot;skipLibCheck&quot;: true,
    &quot;strict&quot;: true,
    &quot;noEmit&quot;: true,
    &quot;esModuleInterop&quot;: true,
    &quot;module&quot;: &quot;esnext&quot;,
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;resolveJsonModule&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;jsx&quot;: &quot;preserve&quot;,
    &quot;incremental&quot;: true,
    &quot;plugins&quot;: [
      {
        &quot;name&quot;: &quot;next&quot;
      }
    ],
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
  },
  &quot;include&quot;: [&quot;next-env.d.ts&quot;, &quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;.next/types/**/*.ts&quot;],
  &quot;exclude&quot;: [&quot;node_modules&quot;]
}
]]&gt;</document_content>
  </document>
  <document index="11">
    <source>next.config.ts</source>
    <document_content>&lt;![CDATA[import type { Configuration } from 'webpack'
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    serverActions: {
      allowedOrigins: ['localhost:3000']
    }
  },
  env: {
    RESEND_API_KEY: process.env.RESEND_API_KEY,
  },
  webpack: (config: Configuration, { isServer }: { isServer: boolean }) =&gt; {
    if (!isServer) {
      config.watchOptions = {
        poll: 1000,
        aggregateTimeout: 300,
      }
    }
    return config
  },
}

module.exports = nextConfig]]&gt;</document_content>
  </document>
  <document index="12">
    <source>prisma/schema.prisma</source>
    <document_content/>
  </document>
  <document index="12">
    <source>src/middleware.ts</source>
    <document_content>&lt;![CDATA[// src/middleware.ts
import { withAuth } from 'next-auth/middleware'
import { NextResponse } from 'next/server'

export default withAuth(
  function middleware(req) {
    const token = req.nextauth.token
    const path = req.nextUrl.pathname

    // Check for admin routes
    if (path.startsWith('/admin') &amp;&amp; token?.role !== 'ADMIN') {
      return NextResponse.redirect(new URL('/dashboard', req.url))
    }

    // Check for business routes
    if (path.startsWith('/business') &amp;&amp; token?.role !== 'BUSINESS_OWNER') {
      return NextResponse.redirect(new URL('/dashboard', req.url))
    }

    // Check for moderator routes
    if (path.startsWith('/moderator') &amp;&amp; token?.role !== 'MODERATOR') {
      return NextResponse.redirect(new URL('/dashboard', req.url))
    }

    return NextResponse.next()
  },
  {
    callbacks: {
      authorized: ({ token }) =&gt; !!token
    },
  }
)

export const config = {
  matcher: [
    '/dashboard/:path*',
    '/admin/:path*',
    '/business/:path*',
    '/moderator/:path*',
    '/profile/:path*',
  ]
}]]&gt;</document_content>
  </document>
  <document index="13">
    <source>public/globe.svg</source>
    <document_content/>
  </document>
  <document index="13">
    <source>public/next.svg</source>
    <document_content/>
  </document>
  <document index="13">
    <source>public/window.svg</source>
    <document_content/>
  </document>
  <document index="13">
    <source>public/file.svg</source>
    <document_content/>
  </document>
  <document index="13">
    <source>public/vercel.svg</source>
    <document_content/>
  </document>
  <document index="13">
    <source>prisma/migrations/migration_lock.toml</source>
    <document_content/>
  </document>
  <document index="13">
    <source>prisma/migrations/20241212064203_add_social_auth/migration.sql</source>
    <document_content>&lt;![CDATA[-- AlterTable
ALTER TABLE &quot;users&quot; ADD COLUMN     &quot;image&quot; TEXT;

-- CreateTable
CREATE TABLE &quot;Account&quot; (
    &quot;id&quot; TEXT NOT NULL,
    &quot;userId&quot; TEXT NOT NULL,
    &quot;type&quot; TEXT NOT NULL,
    &quot;provider&quot; TEXT NOT NULL,
    &quot;providerAccountId&quot; TEXT NOT NULL,
    &quot;refresh_token&quot; TEXT,
    &quot;access_token&quot; TEXT,
    &quot;expires_at&quot; INTEGER,
    &quot;token_type&quot; TEXT,
    &quot;scope&quot; TEXT,
    &quot;id_token&quot; TEXT,
    &quot;session_state&quot; TEXT,

    CONSTRAINT &quot;Account_pkey&quot; PRIMARY KEY (&quot;id&quot;)
);

-- CreateTable
CREATE TABLE &quot;Session&quot; (
    &quot;id&quot; TEXT NOT NULL,
    &quot;sessionToken&quot; TEXT NOT NULL,
    &quot;userId&quot; TEXT NOT NULL,
    &quot;expires&quot; TIMESTAMP(3) NOT NULL,

    CONSTRAINT &quot;Session_pkey&quot; PRIMARY KEY (&quot;id&quot;)
);

-- CreateIndex
CREATE UNIQUE INDEX &quot;Account_provider_providerAccountId_key&quot; ON &quot;Account&quot;(&quot;provider&quot;, &quot;providerAccountId&quot;);

-- CreateIndex
CREATE UNIQUE INDEX &quot;Session_sessionToken_key&quot; ON &quot;Session&quot;(&quot;sessionToken&quot;);

-- AddForeignKey
ALTER TABLE &quot;Account&quot; ADD CONSTRAINT &quot;Account_userId_fkey&quot; FOREIGN KEY (&quot;userId&quot;) REFERENCES &quot;users&quot;(&quot;id&quot;) ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE &quot;Session&quot; ADD CONSTRAINT &quot;Session_userId_fkey&quot; FOREIGN KEY (&quot;userId&quot;) REFERENCES &quot;users&quot;(&quot;id&quot;) ON DELETE CASCADE ON UPDATE CASCADE;
]]&gt;</document_content>
  </document>
  <document index="14">
    <source>prisma/migrations/20241212070946_make_password_optional/migration.sql</source>
    <document_content>&lt;![CDATA[-- AlterTable
ALTER TABLE &quot;users&quot; ALTER COLUMN &quot;password&quot; DROP NOT NULL;
]]&gt;</document_content>
  </document>
  <document index="15">
    <source>prisma/migrations/20241210131954_init_schema/migration.sql</source>
    <document_content>&lt;![CDATA[-- CreateEnum
CREATE TYPE &quot;UserRole&quot; AS ENUM ('SUPER_ADMIN', 'ADMIN', 'BUSINESS_OWNER', 'CUSTOMER', 'MODERATOR');

-- CreateTable
CREATE TABLE &quot;users&quot; (
    &quot;id&quot; TEXT NOT NULL,
    &quot;email&quot; TEXT NOT NULL,
    &quot;name&quot; TEXT,
    &quot;password&quot; TEXT NOT NULL,
    &quot;role&quot; &quot;UserRole&quot; NOT NULL DEFAULT 'CUSTOMER',
    &quot;emailVerified&quot; BOOLEAN NOT NULL DEFAULT false,
    &quot;points&quot; INTEGER NOT NULL DEFAULT 0,
    &quot;verificationToken&quot; TEXT,
    &quot;passwordResetToken&quot; TEXT,
    &quot;passwordResetExpires&quot; TIMESTAMP(3),
    &quot;createdAt&quot; TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    &quot;updatedAt&quot; TIMESTAMP(3) NOT NULL,

    CONSTRAINT &quot;users_pkey&quot; PRIMARY KEY (&quot;id&quot;)
);

-- CreateTable
CREATE TABLE &quot;businesses&quot; (
    &quot;id&quot; TEXT NOT NULL,
    &quot;name&quot; TEXT NOT NULL,
    &quot;category&quot; TEXT NOT NULL,
    &quot;phone&quot; TEXT NOT NULL,
    &quot;website&quot; TEXT,
    &quot;address&quot; TEXT NOT NULL,
    &quot;city&quot; TEXT NOT NULL,
    &quot;county&quot; TEXT NOT NULL,
    &quot;eircode&quot; TEXT,
    &quot;openingHours&quot; JSONB NOT NULL,
    &quot;ownerId&quot; TEXT NOT NULL,
    &quot;createdAt&quot; TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    &quot;updatedAt&quot; TIMESTAMP(3) NOT NULL,

    CONSTRAINT &quot;businesses_pkey&quot; PRIMARY KEY (&quot;id&quot;)
);

-- CreateIndex
CREATE UNIQUE INDEX &quot;users_email_key&quot; ON &quot;users&quot;(&quot;email&quot;);

-- CreateIndex
CREATE UNIQUE INDEX &quot;users_verificationToken_key&quot; ON &quot;users&quot;(&quot;verificationToken&quot;);

-- CreateIndex
CREATE UNIQUE INDEX &quot;users_passwordResetToken_key&quot; ON &quot;users&quot;(&quot;passwordResetToken&quot;);

-- AddForeignKey
ALTER TABLE &quot;businesses&quot; ADD CONSTRAINT &quot;businesses_ownerId_fkey&quot; FOREIGN KEY (&quot;ownerId&quot;) REFERENCES &quot;users&quot;(&quot;id&quot;) ON DELETE RESTRICT ON UPDATE CASCADE;
]]&gt;</document_content>
  </document>
  <document index="16">
    <source>prisma/migrations/20241211083014_add_email_verification_fields/migration.sql</source>
    <document_content>&lt;![CDATA[-- AlterTable
ALTER TABLE &quot;users&quot; ADD COLUMN     &quot;emailVerificationAttempts&quot; INTEGER NOT NULL DEFAULT 0,
ADD COLUMN     &quot;emailVerificationLastAttempt&quot; TIMESTAMP(3),
ADD COLUMN     &quot;emailVerificationStatus&quot; TEXT DEFAULT 'PENDING';
]]&gt;</document_content>
  </document>
  <document index="17">
    <source>src/hooks/useDebounce.ts</source>
    <document_content>&lt;![CDATA[import { useCallback, useRef } from 'react';

export function useDebounce(delay: number) {
  const timeoutRef = useRef&lt;NodeJS.Timeout&gt;();

  const debounce = useCallback(
    (fn: () =&gt; void) =&gt; {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      timeoutRef.current = setTimeout(fn, delay);
    },
    [delay]
  );

  return debounce;
}]]&gt;</document_content>
  </document>
  <document index="18">
    <source>src/app/globals.css</source>
    <document_content>&lt;![CDATA[@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: #FF4D00;
  --primary-hover: #E64500;
  --secondary: #A4C639;
  --secondary-hover: #93B233;
  --text-primary: #333333;
  --text-secondary: #666666;
  --border: #E5E7EB;
}

body {
  color: var(--text-primary);
}

input::placeholder {
  color: var(--text-secondary);
  opacity: 1;
}

/* Improve input visibility */
input {
  color: var(--text-primary) !important;
  background-color: white !important;
}

/* Improve select visibility */
select {
  color: var(--text-primary) !important;
  background-color: white !important;
}]]&gt;</document_content>
  </document>
  <document index="19">
    <source>src/app/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useState } from 'react'
import Button from '@/components/Button'
import Link from 'next/link'
import BusinessRegistrationModal from '@/components/BusinessRegistrationModal'

export default function Home() {
  const [showRegistration, setShowRegistration] = useState(false)

  return (
    &lt;div className=&quot;min-h-screen bg-white&quot;&gt;
      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;
        &lt;div className=&quot;relative pt-6 pb-16 sm:pb-24&quot;&gt;
          &lt;header className=&quot;flex justify-between items-center&quot;&gt;
            &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;Huubr&lt;/h2&gt;
            &lt;button
              onClick={() =&gt; setShowRegistration(true)}
              className=&quot;bg-[#FF4D00] text-white px-4 py-2 rounded-lg hover:bg-[#E64500] transition-colors&quot;
            &gt;
              List your Business
            &lt;/button&gt;
          &lt;/header&gt;

          &lt;main className=&quot;mt-16 mx-auto max-w-7xl px-4 sm:mt-24&quot;&gt;
            &lt;div className=&quot;text-center&quot;&gt;
              &lt;h1 className=&quot;text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl&quot;&gt;
                &lt;span className=&quot;block xl:inline&quot;&gt;Welcome to &lt;/span&gt;
                &lt;span className=&quot;block text-primary xl:inline&quot;&gt;Huubr&lt;/span&gt;
              &lt;/h1&gt;
              &lt;p className=&quot;mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl&quot;&gt;
                Your one-stop platform for local business directory management.
              &lt;/p&gt;
              &lt;div className=&quot;mt-5 max-w-md mx-auto sm:flex sm:justify-center md:mt-8&quot;&gt;
                &lt;div className=&quot;rounded-md shadow&quot;&gt;
                  &lt;Link href=&quot;/login&quot;&gt;
                    &lt;Button className=&quot;w-full flex items-center justify-center px-8 py-3&quot;&gt;
                      Get Started
                    &lt;/Button&gt;
                  &lt;/Link&gt;
                &lt;/div&gt;
                &lt;div className=&quot;mt-3 rounded-md shadow sm:mt-0 sm:ml-3&quot;&gt;
                  &lt;Link href=&quot;/register&quot;&gt;
                    &lt;Button variant=&quot;outline&quot; className=&quot;w-full flex items-center justify-center px-8 py-3&quot;&gt;
                      Register Business
                    &lt;/Button&gt;
                  &lt;/Link&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/main&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;BusinessRegistrationModal 
        key={showRegistration ? 'modal-open' : 'modal-closed'}
        isOpen={showRegistration}
        onClose={() =&gt; setShowRegistration(false)}
      /&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="20">
    <source>src/app/layout.tsx</source>
    <document_content>&lt;![CDATA[// src/app/layout.tsx
import { Suspense } from 'react'
import { Toaster } from 'react-hot-toast'
import AuthProvider from '@/providers/session-provider'
import './globals.css'

export const metadata = {
  title: 'Huubr - Business Directory',
  description: 'Your one-stop platform for local business directory management.'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    &lt;html lang=&quot;en&quot; suppressHydrationWarning&gt;
      &lt;body suppressHydrationWarning&gt;
        &lt;Suspense fallback={null}&gt;
          &lt;AuthProvider&gt;
            {children}
            &lt;Toaster position=&quot;top-right&quot; /&gt;
          &lt;/AuthProvider&gt;
        &lt;/Suspense&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="21">
    <source>src/emails/VerificationEmail.tsx</source>
    <document_content>&lt;![CDATA[// src/emails/VerificationEmail.tsx
import {
    Body,
    Button,
    Container,
    Head,
    Hr,
    Html,
    Preview,
    Section,
    Text,
  } from '@react-email/components';
  import * as React from 'react';
  
  interface VerificationEmailProps {
    verificationUrl: string;
    userName?: string;
  }
  
  export const VerificationEmail = ({
    verificationUrl,
    userName = '',
  }: VerificationEmailProps) =&gt; {
    return (
      &lt;Html&gt;
        &lt;Head /&gt;
        &lt;Preview&gt;Verify your email address for Huubr&lt;/Preview&gt;
        &lt;Body style={main}&gt;
          &lt;Container style={container}&gt;
            &lt;Text style={paragraph}&gt;Hi {userName},&lt;/Text&gt;
            &lt;Text style={paragraph}&gt;
              Thank you for registering your business with Huubr. Please verify your email address by
              clicking the button below:
            &lt;/Text&gt;
            &lt;Section style={buttonContainer}&gt;
              &lt;Button
                pX={20}
                pY={12}
                style={button}
                href={verificationUrl}
              &gt;
                Verify Email
              &lt;/Button&gt;
            &lt;/Section&gt;
            &lt;Text style={paragraph}&gt;
              Or copy and paste this URL into your browser:
            &lt;/Text&gt;
            &lt;Text style={paragraph}&gt;
              &lt;a href={verificationUrl} style={link}&gt;
                {verificationUrl}
              &lt;/a&gt;
            &lt;/Text&gt;
            &lt;Hr style={hr} /&gt;
            &lt;Text style={footer}&gt;
              This link will expire in 24 hours. If you did not create an account,
              you can safely ignore this email.
            &lt;/Text&gt;
          &lt;/Container&gt;
        &lt;/Body&gt;
      &lt;/Html&gt;
    );
  };
  
  export default VerificationEmail;
  
  const main = {
    backgroundColor: '#ffffff',
    fontFamily:
      '-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,Oxygen-Sans,Ubuntu,Cantarell,&quot;Helvetica Neue&quot;,sans-serif',
  };
  
  const container = {
    margin: '0 auto',
    padding: '20px 0 48px',
    maxWidth: '560px',
  };
  
  const paragraph = {
    fontSize: '16px',
    lineHeight: '26px',
  };
  
  const button = {
    backgroundColor: '#A4C639',
    borderRadius: '4px',
    color: '#fff',
    fontSize: '16px',
    textDecoration: 'none',
    textAlign: 'center' as const,
    display: 'block',
    width: '100%',
  };
  
  const buttonContainer = {
    padding: '27px 0 27px',
  };
  
  const hr = {
    borderColor: '#cccccc',
    margin: '20px 0',
  };
  
  const footer = {
    color: '#8898aa',
    fontSize: '12px',
  };
  
  const link = {
    color: '#A4C639',
    textDecoration: 'underline',
  };]]&gt;</document_content>
  </document>
  <document index="22">
    <source>src/types/business.ts</source>
    <document_content>&lt;![CDATA[export interface BusinessFormData {
    fullName: string;
    email: string;
    password: string;
    confirmPassword: string;
    businessName: string;
    businessCategory: string;
    phoneNumber: string;
    website?: string;
    address: string;
    city: string;
    county: string;
    eircode?: string;
    openingHours: {
      [key: string]: {
        isOpen: boolean;
        start?: string;
        end?: string;
      };
    };
  }
  
  export interface ValidationError {
    field: string;
    message: string;
  }
  
  export interface FieldError {
    [key: string]: string;
  }
  
  export const WEEK_DAYS = [
    'monday',
    'tuesday',
    'wednesday',
    'thursday',
    'friday',
    'saturday',
    'sunday'
  ] as const;
  
  export const BUSINESS_CATEGORIES = [
    'Restaurants &amp; Catering',
    'Retail',
    'Professional Services',
    'Health &amp; Wellness',
    'Technology',
    'Beauty &amp; Personal Care',
    'Education &amp; Training',
    'Home Services',
    'Automotive',
    'Entertainment'
  ] as const;
  
  export type WeekDay = typeof WEEK_DAYS[number];
  export type BusinessCategory = typeof BUSINESS_CATEGORIES[number];]]&gt;</document_content>
  </document>
  <document index="23">
    <source>src/types/forms.ts</source>
    <document_content>&lt;![CDATA[export interface BusinessRegistrationData {
    // Step 1: Owner Information
    fullName: string;
    email: string;
    password: string;
    confirmPassword: string;
  
    // Step 2: Business Information
    businessName: string;
    businessCategory: string;
    phoneNumber: string;
    website?: string;
  
    // Step 3: Location &amp; Hours
    address: string;
    city: string;
    county: string;
    eircode?: string;
    openingHours: {
      [key: string]: {
        isOpen: boolean;
        start?: string;
        end?: string;
      };
    };
  }
  
  export interface ValidationErrors {
    [key: string]: string;
  }]]&gt;</document_content>
  </document>
  <document index="24">
    <source>src/types/react-email.d.ts</source>
    <document_content>&lt;![CDATA[// src/types/react-email.d.ts

declare module '@react-email/components' {
    import { ReactNode } from 'react';
  
    interface BaseProps {
      children?: ReactNode;
      style?: React.CSSProperties;
    }
  
    export function Body(props: BaseProps): JSX.Element;
    export function Button(props: BaseProps &amp; { href?: string; pX?: number; pY?: number }): JSX.Element;
    export function Container(props: BaseProps): JSX.Element;
    export function Head(props: BaseProps): JSX.Element;
    export function Hr(props: BaseProps): JSX.Element;
    export function Html(props: BaseProps): JSX.Element;
    export function Preview(props: BaseProps): JSX.Element;
    export function Section(props: BaseProps): JSX.Element;
    export function Text(props: BaseProps): JSX.Element;
  }
  
  declare module '@react-email/render' {
    import { ReactElement } from 'react';
    export function render(component: ReactElement): Promise&lt;string&gt;;
  }]]&gt;</document_content>
  </document>
  <document index="25">
    <source>src/components/Notification.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useEffect, useState } from 'react'

interface NotificationProps {
  message: string
  type: 'success' | 'error'
  duration?: number
  onClose: () =&gt; void
}

export default function Notification({ 
  message, 
  type, 
  duration = 5000, 
  onClose 
}: NotificationProps) {
  const [isVisible, setIsVisible] = useState(true)

  useEffect(() =&gt; {
    const timer = setTimeout(() =&gt; {
      setIsVisible(false)
      setTimeout(onClose, 300) // Allow time for exit animation
    }, duration)

    return () =&gt; clearTimeout(timer)
  }, [duration, onClose])

  const baseClasses = `
    fixed top-4 right-4 max-w-sm w-full 
    p-4 rounded-lg shadow-lg 
    transform transition-all duration-300
    ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}
  `

  const typeClasses = {
    success: 'bg-[#A4C639] text-white',
    error: 'bg-red-500 text-white',
  }

  return (
    &lt;div className={`${baseClasses} ${typeClasses[type]}`}&gt;
      &lt;div className=&quot;flex items-center justify-between&quot;&gt;
        &lt;div className=&quot;flex-1&quot;&gt;{message}&lt;/div&gt;
        &lt;button
          onClick={() =&gt; {
            setIsVisible(false)
            setTimeout(onClose, 300)
          }}
          className=&quot;ml-4 text-white hover:text-gray-200&quot;
        &gt;
          ×
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="26">
    <source>src/components/InputField.tsx</source>
    <document_content>&lt;![CDATA[// src/components/InputField.tsx

export interface InputFieldProps {
  label: string;
  name: string;
  type?: string;
  required?: boolean;
  value?: string;
  error?: string;
  placeholder?: string;
  onChange: (name: string, value: string) =&gt; void;
}

export default function InputField({
  label,
  name,
  type = 'text',
  required = false,
  value = '',
  error,
  placeholder,
  onChange
}: InputFieldProps) {
  return (
    &lt;div&gt;
      &lt;label className=&quot;block text-[#333] font-medium mb-2&quot;&gt;
        {label}
        {required &amp;&amp; &lt;span className=&quot;text-red-500 ml-1&quot;&gt;*&lt;/span&gt;}
      &lt;/label&gt;
      &lt;div className=&quot;relative&quot;&gt;
        &lt;input
          type={type}
          value={value}
          onChange={(e) =&gt; onChange(name, e.target.value)}
          className={`
            w-full p-3 border rounded-lg text-[#333]
            ${error ? 'border-red-500' : 'border-gray-300'}
            transition-colors duration-200
          `}
          placeholder={placeholder}
          required={required}
        /&gt;
      &lt;/div&gt;
      {error &amp;&amp; (
        &lt;p className=&quot;mt-1 text-sm text-red-500&quot;&gt;
          {error}
        &lt;/p&gt;
      )}
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="27">
    <source>src/components/ResendVerification.tsx</source>
    <document_content>&lt;![CDATA[// src/components/ResendVerification.tsx
'use client';

import { useState } from 'react';
import { toast } from 'react-hot-toast';
import Button from './Button';

export function ResendVerification({ email }: { email: string }) {
  const [isLoading, setIsLoading] = useState(false);

  const handleResend = async () =&gt; {
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/resend-verification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to resend verification email');
      }

      toast.success('Verification email sent successfully');
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Failed to resend verification email');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    &lt;Button
      variant=&quot;outline&quot;
      onClick={handleResend}
      isLoading={isLoading}
      className=&quot;mt-4&quot;
    &gt;
      Resend Verification Email
    &lt;/Button&gt;
  );
}]]&gt;</document_content>
  </document>
  <document index="28">
    <source>src/components/StepIndicator.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { motion } from 'framer-motion'
import { useEffect, useState } from 'react'

interface StepIndicatorProps {
  currentStep: number
  totalSteps: number
  labels?: string[]
}

export default function StepIndicator({ 
  currentStep, 
  totalSteps, 
  labels = [] 
}: StepIndicatorProps) {
  // Add local state to handle the animation
  const [animatedStep, setAnimatedStep] = useState(1)

  useEffect(() =&gt; {
    // Update animated step after mount
    setAnimatedStep(currentStep)
  }, [currentStep])

  return (
    &lt;div className=&quot;flex items-center justify-center w-full mb-8&quot;&gt;
      {Array.from({ length: totalSteps }).map((_, index) =&gt; (
        &lt;div key={index} className=&quot;flex items-center&quot;&gt;
          &lt;div className=&quot;relative&quot;&gt;
            &lt;motion.div
              key={`step-${index}-${animatedStep}`}
              className={`
                w-8 h-8 rounded-full flex items-center justify-center
                ${animatedStep &gt; index 
                  ? 'bg-[#A4C639] text-white' 
                  : animatedStep === index + 1
                  ? 'bg-[#A4C639] text-white' 
                  : 'bg-gray-200 text-gray-500'}
              `}
              initial={{ scale: 1 }}
              animate={{
                scale: animatedStep === index + 1 ? [1, 1.1, 1] : 1
              }}
              transition={{
                duration: 0.3
              }}
            &gt;
              {index + 1}
            &lt;/motion.div&gt;
            {labels[index] &amp;&amp; (
              &lt;span className=&quot;absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-sm text-gray-500&quot;&gt;
                {labels[index]}
              &lt;/span&gt;
            )}
          &lt;/div&gt;
          {index &lt; totalSteps - 1 &amp;&amp; (
            &lt;div className=&quot;w-16 h-1 mx-1&quot;&gt;
              &lt;div className=&quot;h-full bg-gray-200&quot;&gt;
                &lt;motion.div
                  key={`line-${index}-${animatedStep}`}
                  className=&quot;h-full bg-[#A4C639]&quot;
                  initial={{ width: &quot;0%&quot; }}
                  animate={{
                    width: animatedStep &gt; index + 1 ? &quot;100%&quot; : &quot;0%&quot;
                  }}
                  transition={{ duration: 0.3 }}
                /&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          )}
        &lt;/div&gt;
      ))}
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="29">
    <source>src/components/Button.tsx</source>
    <document_content>&lt;![CDATA[interface ButtonProps extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt; {
    variant?: 'primary' | 'secondary' | 'outline'
    isLoading?: boolean
  }
  
  export default function Button({ 
    children, 
    variant = 'primary', 
    isLoading, 
    className = '', 
    disabled, 
    ...props 
  }: ButtonProps) {
    const baseClasses = 'px-4 py-2 rounded-lg font-medium transition-colors duration-200'
    
    const variants = {
      primary: 'bg-[#A4C639] text-white hover:bg-[#93B233] disabled:bg-gray-300',
      secondary: 'bg-[#FF4D00] text-white hover:bg-[#E64500] disabled:bg-gray-300',
      outline: 'border border-[#A4C639] text-[#A4C639] hover:bg-[#A4C639] hover:text-white',
    }
  
    return (
      &lt;button
        className={`
          ${baseClasses}
          ${variants[variant]}
          ${className}
          ${disabled || isLoading ? 'cursor-not-allowed opacity-70' : ''}
        `}
        disabled={disabled || isLoading}
        {...props}
      &gt;
        {isLoading ? (
          &lt;span className=&quot;flex items-center justify-center&quot;&gt;
            &lt;svg className=&quot;animate-spin -ml-1 mr-3 h-5 w-5&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;&gt;
              &lt;circle className=&quot;opacity-25&quot; cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;4&quot; /&gt;
              &lt;path className=&quot;opacity-75&quot; fill=&quot;currentColor&quot; d=&quot;M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z&quot; /&gt;
            &lt;/svg&gt;
            Loading...
          &lt;/span&gt;
        ) : children}
      &lt;/button&gt;
    )
  }]]&gt;</document_content>
  </document>
  <document index="30">
    <source>src/components/BusinessRegistrationModal.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useState, useCallback, useEffect } from 'react'
import { AnimatePresence, motion } from 'framer-motion'
import { toast } from 'react-hot-toast'
import { memo } from 'react'
import StepTransition from './StepTransition'
import StepIndicator from './StepIndicator'
import Button from './Button'
import InputField from './InputField'
import { BusinessFormData, FieldError, WEEK_DAYS, BUSINESS_CATEGORIES } from '@/types/business'

interface BusinessRegistrationModalProps {
  isOpen: boolean;
  onClose: () =&gt; void;
}

const FormWrapper = memo(({ children }: { children: React.ReactNode }) =&gt; {
  return &lt;&gt;{children}&lt;/&gt;
})

FormWrapper.displayName = 'FormWrapper'

const INITIAL_FORM_DATA: BusinessFormData = {
  fullName: '',
  email: '',
  password: '',
  confirmPassword: '',
  businessName: '',
  businessCategory: '',
  phoneNumber: '',
  website: '',
  address: '',
  city: '',
  county: '',
  eircode: '',
  openingHours: WEEK_DAYS.reduce((acc, day) =&gt; ({
    ...acc,
    [day]: { isOpen: day !== 'saturday' &amp;&amp; day !== 'sunday', start: '09:00', end: '17:00' }
  }), {})
}

const STEP_LABELS = [
  'Personal Info',
  'Business Details',
  'Location &amp; Hours'
]

export default function BusinessRegistrationModal({ isOpen, onClose }: BusinessRegistrationModalProps) {
  const [step, setStep] = useState&lt;number&gt;(1)
  const [direction, setDirection] = useState&lt;'forward' | 'backward'&gt;('forward')
  const [loading, setLoading] = useState(false)
  const [fieldErrors, setFieldErrors] = useState&lt;FieldError&gt;({})
  const [formData, setFormData] = useState&lt;BusinessFormData&gt;(INITIAL_FORM_DATA)
  const [isSuccess, setIsSuccess] = useState(false)

  useEffect(() =&gt; {
    if (isOpen) {
      // When opening, we explicitly set everything to initial state
      console.log('Modal opened, setting step to 1');
      setStep(1);
      setFormData(INITIAL_FORM_DATA)
      setFieldErrors({})
      setIsSuccess(false)
      setDirection('forward')
    }
  }, [isOpen]) // Only depend on isOpen

  const handleFieldChange = useCallback((name: string, value: string) =&gt; {
    setFormData(prev =&gt; ({ ...prev, [name]: value }))
  }, [])

  const validateSingleField = async (field: string, value: string, data: BusinessFormData): Promise&lt;string | null&gt; =&gt; {
    switch (field) {
      case 'email':
        if (!value) return 'Email is required'
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) return 'Invalid email format'
        // Check if email exists
        try {
          const response = await fetch(`/api/check-email?email=${encodeURIComponent(value)}`)
          const result = await response.json()
          if (result.exists) return 'Email already registered'
        } catch (error) {
          console.error('Email check failed:', error)
        }
        return null

      case 'password':
        if (!value) return 'Password is required'
        if (value.length &lt; 8) return 'Password must be at least 8 characters'
        if (!/[A-Z]/.test(value)) return 'Password must contain at least one uppercase letter'
        if (!/[a-z]/.test(value)) return 'Password must contain at least one lowercase letter'
        if (!/[0-9]/.test(value)) return 'Password must contain at least one number'
        return null

      case 'confirmPassword':
        if (value !== data.password) return 'Passwords do not match'
        return null

      case 'phoneNumber':
        if (!value) return 'Phone number is required'
        if (!/^(\+\d{1,3}[- ]?)?\d{10}$/.test(value.replace(/\s/g, ''))) {
          return 'Invalid phone number format'
        }
        return null

      case 'eircode':
        if (value &amp;&amp; !/^[A-Z]\d{2}[A-Z0-9]{4}$/.test(value)) {
          return 'Invalid Eircode format'
        }
        return null

      default:
        if (!value &amp;&amp; field !== 'website') return `${field} is required`
        return null
    }
  }

  const validateCurrentStep = useCallback(async () =&gt; {
    const fieldsToValidate = {
      1: ['fullName', 'email', 'password', 'confirmPassword'],
      2: ['businessName', 'businessCategory', 'phoneNumber', 'website'],
      3: ['address', 'city', 'county', 'eircode']
    }[step]

    if (!fieldsToValidate) return false

    const errors: FieldError = {}
    
    await Promise.all(
      fieldsToValidate.map(async field =&gt; {
        const error = await validateSingleField(
          field,
          formData[field as keyof BusinessFormData] as string,
          formData
        )
        if (error) errors[field] = error
      })
    )

    console.log('Validation errors:', errors)
    setFieldErrors(errors)
    return Object.keys(errors).length === 0
  }, [step, formData])  


  const handleNext = async () =&gt; {
    const isValid = await validateCurrentStep()
    if (isValid) {
      setDirection('forward')
      setStep(s =&gt; Math.min(s + 1, 3))
    } else {
      toast.error('Please fix the errors before continuing')
    }
  }

  const handleBack = () =&gt; {
    setDirection('backward')
    if (step &gt; 1) {
      setStep(s =&gt; s - 1)
    } else {
      onClose()
    }
  }

  const handleSubmit = async (e: React.FormEvent) =&gt; {
    e.preventDefault()
    console.log('Submit started')
    
    if (!await validateCurrentStep()) {
      console.log('Validation failed')
      return
    }
  
    console.log('Validation passed, sending data:', formData)
    setLoading(true)
    
    try {
      const response = await fetch('/api/auth/register/business', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      })
  
      console.log('Response received:', response)
      const data = await response.json()
      console.log('Response data:', data)
  
      if (!response.ok) {
        throw new Error(data.error || 'Registration failed')
      }
  
      setIsSuccess(true)
      toast.success('Business registered successfully!')
      
      setTimeout(() =&gt; {
        onClose()
      }, 2000)
  
    } catch (error) {
      console.error('Registration error:', error)
      toast.error(error instanceof Error ? error.message : 'Registration failed')
    } finally {
      setLoading(false)
    }
  }
// Log before rendering StepIndicator
console.log('BusinessRegistrationModal render, current step:', step);

  const renderStep1 = () =&gt; (
&lt;div className=&quot;space-y-4&quot;&gt;
      &lt;InputField
        label=&quot;Full Name&quot;
        name=&quot;fullName&quot;
        placeholder=&quot;Your full name&quot;
        required
        value={formData.fullName}
        onChange={handleFieldChange}
        error={fieldErrors.fullName}
      /&gt;
      &lt;InputField
        label=&quot;Email Address&quot;
        name=&quot;email&quot;
        type=&quot;email&quot;
        placeholder=&quot;your.email@example.com&quot;
        required
        value={formData.email}
        onChange={handleFieldChange}
        error={fieldErrors.email}
      /&gt;
      &lt;InputField
        label=&quot;Password&quot;
        name=&quot;password&quot;
        type=&quot;password&quot;
        placeholder=&quot;Create a secure password&quot;
        required
        value={formData.password}
        onChange={handleFieldChange}
        error={fieldErrors.password}
      /&gt;
      &lt;InputField
        label=&quot;Confirm Password&quot;
        name=&quot;confirmPassword&quot;
        type=&quot;password&quot;
        placeholder=&quot;Confirm your password&quot;
        required
        value={formData.confirmPassword}
        onChange={handleFieldChange}
        error={fieldErrors.confirmPassword}
      /&gt;
    &lt;/div&gt;
  )

  const renderStep2 = () =&gt; (
  &lt;div className=&quot;space-y-4&quot;&gt;
    &lt;InputField
      label=&quot;Business Name&quot;
      name=&quot;businessName&quot;
      placeholder=&quot;Your business name&quot;
      required
      value={formData.businessName}
      onChange={handleFieldChange}
      error={fieldErrors.businessName}
    /&gt;

    &lt;div&gt;
      &lt;label className=&quot;block text-[#333] font-medium mb-2&quot;&gt;
        Business Category&lt;span className=&quot;text-red-500 ml-1&quot;&gt;*&lt;/span&gt;
      &lt;/label&gt;
      &lt;select
        value={formData.businessCategory}
        onChange={(e) =&gt; handleFieldChange('businessCategory', e.target.value)}
        className={`
          w-full p-3 border rounded-lg text-[#333]
          ${fieldErrors.businessCategory ? 'border-red-500' : 'border-gray-300'}
        `}
        required
      &gt;
        &lt;option value=&quot;&quot;&gt;Select a category&lt;/option&gt;
        {BUSINESS_CATEGORIES.map(category =&gt; (
          &lt;option key={category} value={category}&gt;{category}&lt;/option&gt;
        ))}
      &lt;/select&gt;
      {fieldErrors.businessCategory &amp;&amp; (
        &lt;motion.p
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className=&quot;mt-1 text-sm text-red-500&quot;
        &gt;
          {fieldErrors.businessCategory}
        &lt;/motion.p&gt;
      )}
    &lt;/div&gt;

    &lt;InputField
      label=&quot;Phone Number&quot;
      name=&quot;phoneNumber&quot;
      placeholder=&quot;+353 XX XXX XXXX&quot;
      required
      value={formData.phoneNumber}
      onChange={handleFieldChange}
      error={fieldErrors.phoneNumber}
    /&gt;

    &lt;InputField
      label=&quot;Website (Optional)&quot;
      name=&quot;website&quot;
      type=&quot;url&quot;
      placeholder=&quot;https://example.com&quot;
      value={formData.website || &quot;&quot;}
      onChange={handleFieldChange}
      error={fieldErrors.website}
    /&gt;
  &lt;/div&gt;
)


  const renderStep3 = () =&gt; (
    &lt;div className=&quot;space-y-4&quot;&gt;
        &lt;InputField
          label=&quot;Business Address&quot;
          name=&quot;address&quot;
          placeholder=&quot;Street address&quot;
          required
          value={formData.address}
          onChange={handleFieldChange}
          error={fieldErrors.address}
        /&gt;

        &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;
          &lt;InputField
            label=&quot;City&quot;
            name=&quot;city&quot;
            placeholder=&quot;City&quot;
            required
            value={formData.city}
            onChange={handleFieldChange}
            error={fieldErrors.city}
          /&gt;

          &lt;InputField
            label=&quot;County&quot;
            name=&quot;county&quot;
            placeholder=&quot;County&quot;
            required
            value={formData.county}
            onChange={handleFieldChange}
            error={fieldErrors.county}
          /&gt;
        &lt;/div&gt;

        &lt;InputField
          label=&quot;Eircode&quot;
          name=&quot;eircode&quot;
          placeholder=&quot;Eircode&quot;
          value={formData.eircode || &quot;&quot;}
          onChange={handleFieldChange}
          error={fieldErrors.eircode}
        /&gt;

        &lt;div&gt;
          &lt;label className=&quot;block text-[#333] font-medium mb-2&quot;&gt;
            Opening Hours
          &lt;/label&gt;
          {WEEK_DAYS.map((day) =&gt; (
            &lt;div key={day} className=&quot;flex items-center space-x-4 mb-2&quot;&gt;
              &lt;div className=&quot;w-24&quot;&gt;
                &lt;span className=&quot;capitalize&quot;&gt;{day}&lt;/span&gt;
              &lt;/div&gt;
              &lt;input
                type=&quot;checkbox&quot;
                checked={formData.openingHours[day].isOpen}
                onChange={(e) =&gt; {
                  setFormData({
                    ...formData,
                    openingHours: {
                      ...formData.openingHours,
                      [day]: {
                        ...formData.openingHours[day],
                        isOpen: e.target.checked,
                      },
                    },
                  })
                }}
                className=&quot;rounded border-gray-300 text-blue-600&quot;
              /&gt;
              {formData.openingHours[day].isOpen &amp;&amp; (
                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;
                  &lt;input
                    type=&quot;time&quot;
                    value={formData.openingHours[day].start}
                    onChange={(e) =&gt; {
                      setFormData({
                        ...formData,
                        openingHours: {
                          ...formData.openingHours,
                          [day]: {
                            ...formData.openingHours[day],
                            start: e.target.value,
                          },
                        },
                      })
                    }}
                    className=&quot;p-2 border border-gray-300 rounded&quot;
                  /&gt;
                  &lt;span&gt;to&lt;/span&gt;
                  &lt;input
                    type=&quot;time&quot;
                    value={formData.openingHours[day].end}
                    onChange={(e) =&gt; {
                      setFormData({
                        ...formData,
                        openingHours: {
                          ...formData.openingHours,
                          [day]: {
                            ...formData.openingHours[day],
                            end: e.target.value,
                          },
                        },
                      })
                    }}
                    className=&quot;p-2 border border-gray-300 rounded&quot;
                  /&gt;
                &lt;/div&gt;
              )}
            &lt;/div&gt;
          ))}
        &lt;/div&gt;
      &lt;/div&gt;
    )

  if (!isOpen) return null;

  return (
    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50&quot;&gt;
      &lt;motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className=&quot;bg-white rounded-lg p-8 max-w-2xl w-full m-4 relative&quot;
      &gt;
        {isSuccess ? (  
          &lt;motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className=&quot;text-center py-8&quot;
          &gt;
            &lt;motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className=&quot;w-16 h-16 mx-auto mb-4 text-green-500&quot;&gt;&lt;svg className=&quot;w-full h-full&quot; viewBox=&quot;0 0 20 20&quot; fill=&quot;currentColor&quot;&gt;
              &lt;path fillRule=&quot;evenodd&quot; d=&quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&quot; clipRule=&quot;evenodd&quot; /&gt;
            &lt;/svg&gt;
          &lt;/motion.div&gt;
          &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;Registration Successful!&lt;/h3&gt;
          &lt;p className=&quot;text-gray-600&quot;&gt;Your business has been registered successfully.&lt;/p&gt;
        &lt;/motion.div&gt;
      ) : (
        &lt;&gt;
          &lt;div className=&quot;mb-8&quot;&gt;
            &lt;StepIndicator 
              key={`step-indicator-${step}`}
              currentStep={step} 
              totalSteps={3} 
              labels={STEP_LABELS} 
            /&gt;
          &lt;/div&gt;
          &lt;FormWrapper&gt;
            &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;
              &lt;AnimatePresence mode=&quot;wait&quot; initial={false}&gt;
                &lt;StepTransition key={step} direction={direction}&gt;
                  {(() =&gt; {
                    switch (step) {
                      case 1:
                        return renderStep1()
                      case 2:
                        return renderStep2()
                      case 3:
                        return renderStep3()
                      default:
                        return renderStep1()
                    }
                  })()}
                &lt;/StepTransition&gt;
              &lt;/AnimatePresence&gt;

              &lt;div className=&quot;flex justify-between pt-6&quot;&gt;
                &lt;Button
                  type=&quot;button&quot;
                  variant=&quot;outline&quot;
                  onClick={handleBack}
                &gt;
                  {step === 1 ? 'Cancel' : '← Back'}
                &lt;/Button&gt;

                &lt;Button
                  type={step === 3 ? 'submit' : 'button'}
                  variant=&quot;primary&quot;
                  onClick={step === 3 ? undefined : handleNext}
                  isLoading={loading}
                &gt;
                  {step === 3 ? 'Complete Registration' : 'Next →'}
                &lt;/Button&gt;
              &lt;/div&gt;
            &lt;/form&gt;
          &lt;/FormWrapper&gt;
        &lt;/&gt;
      )}
    &lt;/motion.div&gt;
  &lt;/div&gt;
);
}]]&gt;</document_content>
  </document>
  <document index="31">
    <source>src/components/StepTransition.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { motion } from 'framer-motion'

interface StepTransitionProps {
  children: React.ReactNode
  direction?: 'forward' | 'backward'
}

export default function StepTransition({ 
  children, 
  direction = 'forward' 
}: StepTransitionProps) {
  return (
    &lt;motion.div
      initial={{ 
        opacity: 0, 
        x: direction === 'forward' ? 50 : -50 
      }}
      animate={{ 
        opacity: 1, 
        x: 0 
      }}
      exit={{ 
        opacity: 0, 
        x: direction === 'forward' ? -50 : 50 
      }}
      transition={{
        type: &quot;spring&quot;,
        stiffness: 260,
        damping: 20
      }}
    &gt;
      {children}
    &lt;/motion.div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="32">
    <source>src/components/Modal.tsx</source>
    <document_content>&lt;![CDATA['use client'

interface ModalProps {
  isOpen: boolean;
  onClose: () =&gt; void;
  children: React.ReactNode;
}

export default function Modal({ isOpen, children }: ModalProps) {
  if (!isOpen) return null;

  return (
    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50&quot;&gt;
      &lt;div className=&quot;bg-white rounded-lg p-8 max-w-md w-full&quot;&gt;
        {children}
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="33">
    <source>src/lib/email.ts</source>
    <document_content>&lt;![CDATA[// src/lib/email.ts
import { Resend } from 'resend';
import type { ReactElement } from 'react';
import { render } from '@react-email/render';

const resend = new Resend(process.env.RESEND_API_KEY);

interface SendEmailProps {
  to: string;
  subject: string;
  react?: ReactElement;
  html?: string;
}

// src/lib/email.ts
const MAX_RETRIES = 3;
const RETRY_DELAY = 1000; // 1 second

async function sleep(ms: number) {
  return new Promise(resolve =&gt; setTimeout(resolve, ms));
}

export async function sendEmailWithRetry({ to, subject, react, html }: SendEmailProps) {
  let lastError: Error | unknown;
  
  for (let attempt = 1; attempt &lt;= MAX_RETRIES; attempt++) {
    try {
      const result = await sendEmail({ to, subject, react, html });
      return result;
    } catch (error) {
      lastError = error;
      if (attempt &lt; MAX_RETRIES) {
        await sleep(RETRY_DELAY * attempt); // Exponential backoff
        continue;
      }
    }
  }

  throw lastError;
}

export async function sendEmail({ to, subject, react, html }: SendEmailProps) {
  if (!react &amp;&amp; !html) {
    throw new Error('Either react or html must be provided');
  }

  try {
    let htmlContent: string;
    
    if (react) {
      // Ensure render returns a string
      htmlContent = await render(react);
    } else {
      htmlContent = html as string;
    }

    // console.log('Sending email with HTML content:', htmlContent);

    const result = await resend.emails.send({
      from: 'onboarding@resend.dev',
      to,
      subject,
      html: htmlContent,
    });

    return result;
  } catch (error) {
    // console.error('Failed to send email:', error);
    // Log more details about the error
    if (error instanceof Error) {
      console.error('Error details:', {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
    }
    throw error;
  }
}]]&gt;</document_content>
  </document>
  <document index="34">
    <source>src/lib/auth.ts</source>
    <document_content>&lt;![CDATA[import { NextAuthOptions } from &quot;next-auth&quot;
import CredentialsProvider from &quot;next-auth/providers/credentials&quot;
import GoogleProvider from &quot;next-auth/providers/google&quot;
import FacebookProvider from &quot;next-auth/providers/facebook&quot;
import { PrismaAdapter } from &quot;@next-auth/prisma-adapter&quot;
import { compare } from &quot;bcryptjs&quot;
import { UserRole } from &quot;@prisma/client&quot;
import { prisma } from &quot;./prisma&quot;

// Extend NextAuth types
declare module &quot;next-auth&quot; {
  interface User {
    role: UserRole;
  }
  
  interface Session {
    user: User &amp; {
      id: string;
      role: UserRole;
    }
  }
}

declare module &quot;next-auth/adapters&quot; {
  interface AdapterUser {
    role: UserRole;
  }
}

export const authOptions: NextAuthOptions = {
  debug: true,
  adapter: PrismaAdapter(prisma),
  session: {
    strategy: &quot;jwt&quot;
  },
  pages: {
    signIn: &quot;/login&quot;,
    error: &quot;/auth/error&quot;
  },
  providers: [
    CredentialsProvider({
      name: &quot;credentials&quot;,
      credentials: {
        email: { label: &quot;Email&quot;, type: &quot;email&quot; },
        password: { label: &quot;Password&quot;, type: &quot;password&quot; }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error(&quot;Invalid credentials&quot;);
        }

        const user = await prisma.user.findUnique({
          where: {
            email: credentials.email
          }
        });

        if (!user || !user.password) {
          throw new Error(&quot;User not found with this email&quot;);
        }

        if (!user.emailVerified) {
          throw new Error(&quot;Please verify your email before logging in&quot;)
        }

        const isValid = await compare(credentials.password, user.password);
        
        if (!isValid) {
          throw new Error(&quot;Invalid password&quot;);
        }
        
        return {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role,
        };
      }
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      authorization: {
        params: {
          prompt: &quot;select_account&quot;,
          access_type: &quot;offline&quot;,
          response_type: &quot;code&quot;
        }
      },
      async profile(profile) {
        return {
          id: profile.sub,
          name: profile.name,
          email: profile.email,
          image: profile.picture,
          role: &quot;CUSTOMER&quot; as UserRole,
          emailVerified: true
        }
      }
    }),
    FacebookProvider({
      clientId: process.env.FACEBOOK_CLIENT_ID!,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET!,
      async profile(profile) {
        return {
          id: profile.id,
          name: profile.name,
          email: profile.email,
          image: profile.picture?.data?.url,
          role: &quot;CUSTOMER&quot; as UserRole,
          emailVerified: true
        }
      }
    }),
  ],
  callbacks: {
    async signIn({ user, account, profile }) {
      console.log(&quot;SignIn Callback:&quot;, { user, account, profile });
      
      try {
        if (account?.provider === &quot;google&quot; || account?.provider === &quot;facebook&quot;) {
          const existingUser = await prisma.user.findUnique({
            where: { email: user.email! }
          });
  
          if (existingUser) {
            // Update existing user
            await prisma.user.update({
              where: { id: existingUser.id },
              data: { 
                emailVerified: true,
                name: user.name || existingUser.name,
                // Only update image if it exists
                ...(user.image ? { image: user.image } : {})
              }
            });
            return true;
          } else {
            // Create new user
            await prisma.user.create({
              data: {
                email: user.email!,
                name: user.name!,
                // Only include image if it exists
                ...(user.image ? { image: user.image } : {}),
                role: &quot;CUSTOMER&quot;,
                emailVerified: true,
                accounts: {
                  create: {
                    type: account.type,
                    provider: account.provider,
                    providerAccountId: account.providerAccountId,
                    access_token: account.access_token,
                    expires_at: account.expires_at,
                    token_type: account.token_type,
                    scope: account.scope,
                    id_token: account.id_token,
                    refresh_token: account.refresh_token,
                  }
                }
              }
            });
            return true;
          }
        }
        return true;
      } catch (error) {
        console.error(&quot;Error in signIn callback:&quot;, error);
        return false;
      }
    },
    async jwt({ token, user, account, trigger }) {
      console.log(&quot;JWT Callback:&quot;, { token, user, account, trigger });
      
      if (trigger === &quot;signIn&quot; &amp;&amp; account) {
        // Get user from database after social sign in
        const dbUser = await prisma.user.findUnique({
          where: { email: token.email! }
        });
        
        if (dbUser) {
          token.id = dbUser.id;
          token.role = dbUser.role;
        }
      } else if (user) {
        // Normal sign in
        token.id = user.id;
        token.role = user.role;
      }
      
      return token;
    },
    async session({ session, token }) {
      console.log(&quot;Session Callback:&quot;, { session, token });
      
      return {
        ...session,
        user: {
          ...session.user,
          id: token.id as string,
          role: token.role as UserRole,
        }
      };
    }
  },
  events: {
    async signIn(message) {
      console.log(&quot;SignIn Event:&quot;, message);
    },
    async createUser(message) {
      console.log(&quot;CreateUser Event:&quot;, message);
    },
    async linkAccount(message) {
      console.log(&quot;LinkAccount Event:&quot;, message);
    },
    async session(message) {
      console.log(&quot;Session Event:&quot;, message);
    }
  }
}]]&gt;</document_content>
  </document>
  <document index="35">
    <source>src/lib/utils.ts</source>
    <document_content>&lt;![CDATA[import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDate(date: Date) {
  return new Intl.DateTimeFormat('en-IE', {
    dateStyle: 'long',
    timeStyle: 'short',
  }).format(date)
}

export function formatTime(time: string) {
  return new Date(`1970-01-01T${time}`).toLocaleTimeString('en-IE', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: true,
  })
}]]&gt;</document_content>
  </document>
  <document index="36">
    <source>src/lib/auth-utils.ts</source>
    <document_content>&lt;![CDATA[import { getServerSession } from &quot;next-auth&quot;
import { redirect } from &quot;next/navigation&quot;
import { authOptions } from &quot;./auth&quot;

export async function getSession() {
  return await getServerSession(authOptions)
}

export async function getCurrentUser() {
  const session = await getSession()
  return session?.user
}

export async function requireAuth() {
  const user = await getCurrentUser()
  
  if (!user) {
    redirect(&quot;/login&quot;)
  }
  
  return user
}

export function getRedirectUrl(role?: string) {
  switch (role) {
    case &quot;BUSINESS_OWNER&quot;:
      return &quot;/business/dashboard&quot;
    case &quot;ADMIN&quot;:
      return &quot;/admin/dashboard&quot;
    case &quot;CUSTOMER&quot;:
      return &quot;/customer/dashboard&quot;
    default:
      return &quot;/dashboard&quot;
  }
}]]&gt;</document_content>
  </document>
  <document index="37">
    <source>src/lib/prisma.ts</source>
    <document_content>&lt;![CDATA[import { PrismaClient } from '@prisma/client'

const prismaClientSingleton = () =&gt; {
  return new PrismaClient()
}

type PrismaClientSingleton = ReturnType&lt;typeof prismaClientSingleton&gt;

declare global {
  // eslint-disable-next-line no-var
  var prisma: PrismaClientSingleton | undefined
}

export const prisma = globalThis.prisma ?? prismaClientSingleton()

if (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma]]&gt;</document_content>
  </document>
  <document index="38">
    <source>src/utils/validation.ts</source>
    <document_content>&lt;![CDATA[import { BusinessRegistrationData, ValidationErrors } from '@/types/forms'

export const validateStep1 = (data: Partial&lt;BusinessRegistrationData&gt;): ValidationErrors =&gt; {
  const errors: ValidationErrors = {}

  if (!data.fullName?.trim()) {
    errors.fullName = 'Full name is required'
  }

  if (!data.email?.trim()) {
    errors.email = 'Email is required'
  } else if (!/\S+@\S+\.\S+/.test(data.email)) {
    errors.email = 'Please enter a valid email'
  }

  if (!data.password?.trim()) {
    errors.password = 'Password is required'
  } else if (data.password.length &lt; 8) {
    errors.password = 'Password must be at least 8 characters'
  }

  if (!data.confirmPassword?.trim()) {
    errors.confirmPassword = 'Please confirm your password'
  } else if (data.password !== data.confirmPassword) {
    errors.confirmPassword = 'Passwords do not match'
  }

  return errors
}

export const validateStep2 = (data: Partial&lt;BusinessRegistrationData&gt;): ValidationErrors =&gt; {
  const errors: ValidationErrors = {}

  if (!data.businessName?.trim()) {
    errors.businessName = 'Business name is required'
  }

  if (!data.businessCategory?.trim()) {
    errors.businessCategory = 'Please select a business category'
  }

  if (!data.phoneNumber?.trim()) {
    errors.phoneNumber = 'Phone number is required'
  } else if (!/^\+?[\d\s-]{10,}$/.test(data.phoneNumber)) {
    errors.phoneNumber = 'Please enter a valid phone number'
  }

  if (data.website &amp;&amp; !/^https?:\/\/[\w\-]+(\.[\w\-]+)+[/#?]?.*$/.test(data.website)) {
    errors.website = 'Please enter a valid website URL'
  }

  return errors
}

export const validateStep3 = (data: Partial&lt;BusinessRegistrationData&gt;): ValidationErrors =&gt; {
  const errors: ValidationErrors = {}

  if (!data.address?.trim()) {
    errors.address = 'Address is required'
  }

  if (!data.city?.trim()) {
    errors.city = 'City is required'
  }

  if (!data.county?.trim()) {
    errors.county = 'County is required'
  }

  return errors
}]]&gt;</document_content>
  </document>
  <document index="39">
    <source>src/providers/session-provider.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { SessionProvider } from &quot;next-auth/react&quot;

export default function AuthProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return &lt;SessionProvider&gt;{children}&lt;/SessionProvider&gt;
}]]&gt;</document_content>
  </document>
  <document index="40">
    <source>src/app/fonts/GeistMonoVF.woff</source>
    <document_content/>
  </document>
  <document index="40">
    <source>src/app/fonts/GeistVF.woff</source>
    <document_content/>
  </document>
  <document index="40">
    <source>src/app/verify-email/page.tsx</source>
    <document_content>&lt;![CDATA[// src/app/verify-email/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';

export default function VerifyEmailPage() {
  const [status, setStatus] = useState&lt;'loading' | 'success' | 'error'&gt;('loading');
  const [errorMessage, setErrorMessage] = useState&lt;string&gt;('');
  const searchParams = useSearchParams();
  const router = useRouter();
  const token = searchParams.get('token');

  useEffect(() =&gt; {
    const verifyEmail = async () =&gt; {
      try {
        // console.log('Starting verification process');
        // console.log('Token to verify:', token);

        if (!token) {
          throw new Error('No verification token provided');
        }

        const response = await fetch(
          `/api/auth/verify-email?token=${encodeURIComponent(token)}`,
          {
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            }
          }
        );

        const data = await response.json();
        // console.log('Server response:', { status: response.status, data });

        if (!response.ok) {
          throw new Error(data.error || data.details || 'Verification failed');
        }

        setStatus('success');
        toast.success('Email verified successfully!');

        // Redirect to login after success
        setTimeout(() =&gt; {
          router.push('/login');
        }, 2000);

      } catch (error) {
        console.error('Verification error:', error);
        setStatus('error');
        setErrorMessage(
          error instanceof Error 
            ? error.message 
            : 'An unexpected error occurred'
        );
        toast.error('Failed to verify email');
      }
    };

    verifyEmail();
  }, [token, router]);

  return (
    &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;
        {status === 'loading' &amp;&amp; (
          &lt;div className=&quot;text-center&quot;&gt;
            &lt;h2 className=&quot;mt-6 text-3xl font-extrabold text-gray-900&quot;&gt;
              Verifying your email...
            &lt;/h2&gt;
            &lt;div className=&quot;mt-4&quot;&gt;
              &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto&quot;&gt;&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        )}

        {status === 'success' &amp;&amp; (
          &lt;div className=&quot;text-center&quot;&gt;
            &lt;div className=&quot;mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100&quot;&gt;
              &lt;svg className=&quot;h-6 w-6 text-green-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;
                &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; strokeWidth={2} d=&quot;M5 13l4 4L19 7&quot; /&gt;
              &lt;/svg&gt;
            &lt;/div&gt;
            &lt;h2 className=&quot;mt-6 text-3xl font-extrabold text-gray-900&quot;&gt;
              Email Verified!
            &lt;/h2&gt;
            &lt;p className=&quot;mt-2 text-sm text-gray-600&quot;&gt;
              Your email has been verified successfully. Redirecting to login...
            &lt;/p&gt;
          &lt;/div&gt;
        )}

        {status === 'error' &amp;&amp; (
          &lt;div className=&quot;text-center&quot;&gt;
            &lt;div className=&quot;mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100&quot;&gt;
              &lt;svg className=&quot;h-6 w-6 text-red-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;
                &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; strokeWidth={2} d=&quot;M6 18L18 6M6 6l12 12&quot; /&gt;
              &lt;/svg&gt;
            &lt;/div&gt;
            &lt;h2 className=&quot;mt-6 text-3xl font-extrabold text-gray-900&quot;&gt;
              Verification Failed
            &lt;/h2&gt;
            &lt;p className=&quot;mt-2 text-sm text-gray-600&quot;&gt;
              {errorMessage}
            &lt;/p&gt;
            &lt;div className=&quot;mt-4&quot;&gt;
              &lt;button
                onClick={() =&gt; router.push('/login')}
                className=&quot;inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary&quot;
              &gt;
                Go to Login
              &lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}]]&gt;</document_content>
  </document>
  <document index="41">
    <source>src/app/styles/colors.css</source>
    <document_content>&lt;![CDATA[:root {
    --huubr-orange: #FF4D00;
    --huubr-orange-hover: #E64500;
    --huubr-green: #A4C639;
    --huubr-green-hover: #93B233;
    --huubr-text: #333333;
    --huubr-text-light: #666666;
  }
  
  .text-huubr-orange {
    color: var(--huubr-orange);
  }
  
  .bg-huubr-orange {
    background-color: var(--huubr-orange);
  }
  
  .text-huubr-green {
    color: var(--huubr-green);
  }
  
  .bg-huubr-green {
    background-color: var(--huubr-green);
  }]]&gt;</document_content>
  </document>
  <document index="42">
    <source>src/app/dashboard/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useSession } from 'next-auth/react'
import { useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { getRedirectUrl } from '@/lib/auth-utils'

export default function DashboardPage() {
  const { data: session } = useSession()
  const router = useRouter()

  useEffect(() =&gt; {
    if (session?.user?.role) {
      const redirectUrl = getRedirectUrl(session.user.role)
      if (redirectUrl !== '/dashboard') {
        router.replace(redirectUrl)
      }
    }
  }, [session, router])

  if (!session) {
    return null // Or loading state
  }

  return (
    &lt;div className=&quot;min-h-screen p-4&quot;&gt;
      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Dashboard&lt;/h1&gt;
      &lt;div className=&quot;bg-white rounded-lg shadow p-4&quot;&gt;
        &lt;p&gt;Welcome, {session.user.name}&lt;/p&gt;
        &lt;p&gt;Role: {session.user.role}&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
]]&gt;</document_content>
  </document>
  <document index="43">
    <source>src/app/(auth)/loading.tsx</source>
    <document_content>&lt;![CDATA[export default function AuthLoading() {
    return (
      &lt;div className=&quot;flex justify-center items-center min-h-screen&quot;&gt;
        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    )
  }]]&gt;</document_content>
  </document>
  <document index="44">
    <source>src/app/(auth)/layout.tsx</source>
    <document_content>&lt;![CDATA[export default function AuthLayout({
    children,
  }: {
    children: React.ReactNode
  }) {
    return (
      &lt;div className=&quot;min-h-screen flex flex-col justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
        {children}
      &lt;/div&gt;
    )
  }]]&gt;</document_content>
  </document>
  <document index="45">
    <source>src/app/auth/error/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useSearchParams } from 'next/navigation'
import Link from 'next/link'

export default function AuthError() {
  const searchParams = useSearchParams()
  const error = searchParams.get('error')

  return (
    &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;
        &lt;div&gt;
          &lt;h2 className=&quot;mt-6 text-center text-3xl font-bold text-gray-900&quot;&gt;
            Authentication Error
          &lt;/h2&gt;
          &lt;p className=&quot;mt-2 text-center text-sm text-gray-600&quot;&gt;
            {error === 'Callback' 
              ? 'There was a problem signing you in with this provider.'
              : 'An error occurred during authentication.'}
          &lt;/p&gt;
          &lt;div className=&quot;mt-4 text-center&quot;&gt;
            &lt;Link 
              href=&quot;/login&quot;
              className=&quot;text-primary hover:text-primary-dark&quot;
            &gt;
              Back to login
            &lt;/Link&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="46">
    <source>src/app/api/check-email/route.ts</source>
    <document_content>&lt;![CDATA[import { prisma } from &quot;@/lib/prisma&quot;
import { NextResponse } from &quot;next/server&quot;

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const email = searchParams.get('email')

    if (!email) {
      return NextResponse.json(
        { error: &quot;Email parameter is required&quot; },
        { status: 400 }
      )
    }

    const existingUser = await prisma.user.findUnique({
      where: { email },
      select: { id: true } // Only select id for efficiency
    })

    return NextResponse.json({
      exists: !!existingUser
    })

  } catch (error) {
    console.error(&quot;Email check error:&quot;, error)
    return NextResponse.json(
      { error: &quot;Failed to check email&quot; },
      { status: 500 }
    )
  }
}]]&gt;</document_content>
  </document>
  <document index="47">
    <source>src/app/api/auth/register/route.ts</source>
    <document_content>&lt;![CDATA[import { prisma } from &quot;@/lib/prisma&quot;
import { hash } from &quot;bcryptjs&quot;
import { NextResponse } from &quot;next/server&quot;

export async function POST(req: Request) {
  try {
    const { email, password, name } = await req.json()

    // Basic validation 
    if (!email || !password) {
      return NextResponse.json(
        { error: &quot;Missing fields&quot; },
        { status: 400 }
      )
    }

    // Check if user exists
    const exists = await prisma.user.findUnique({
      where: { email }
    })

    if (exists) {
      return NextResponse.json(
        { error: &quot;User already exists&quot; },
        { status: 400 }
      )
    }

    const hashedPassword = await hash(password, 10)

    const user = await prisma.user.create({
      data: {
        email,
        name,
        password: hashedPassword,
        role: &quot;CUSTOMER&quot;
      }
    })

    return NextResponse.json(
      { 
        message: &quot;User created successfully&quot;,
        user: {
          email: user.email,
          name: user.name,
          role: user.role
        }
      },
      { status: 201 }
    )

  } catch (error) {
    console.error(&quot;Registration error:&quot;, error)
    return NextResponse.json(
      { error: &quot;Error creating user&quot; },
      { status: 500 }
    )
  }
}]]&gt;</document_content>
  </document>
  <document index="48">
    <source>src/app/api/auth/reset-password/route.ts</source>
    <document_content>&lt;![CDATA[// src/app/api/auth/reset-password/route.ts
import { prisma } from &quot;@/lib/prisma&quot;
import { hash } from &quot;bcryptjs&quot;
import { NextResponse } from &quot;next/server&quot;
import crypto from 'crypto'

export async function POST(req: Request) {
  try {
    const { token, password } = await req.json()

    if (!token || !password) {
      return NextResponse.json(
        { error: &quot;Missing token or password&quot; },
        { status: 400 }
      )
    }

    // Hash the token from the URL to compare with stored hash
    const hashedToken = crypto
      .createHash('sha256')
      .update(token)
      .digest('hex')

    const user = await prisma.user.findFirst({
      where: {
        passwordResetToken: hashedToken,
        passwordResetExpires: {
          gt: new Date()
        }
      }
    })

    if (!user) {
      return NextResponse.json(
        { error: &quot;Invalid or expired reset token&quot; },
        { status: 400 }
      )
    }

    const hashedPassword = await hash(password, 12)

    await prisma.user.update({
      where: { id: user.id },
      data: {
        password: hashedPassword,
        passwordResetToken: null,
        passwordResetExpires: null
      }
    })

    return NextResponse.json({ message: &quot;Password updated successfully&quot; })
  } catch (error) {
    console.error(&quot;Reset password error:&quot;, error)
    return NextResponse.json(
      { error: &quot;Failed to reset password&quot; },
      { status: 500 }
    )
  }
}]]&gt;</document_content>
  </document>
  <document index="49">
    <source>src/app/api/auth/resend-verification/route.ts</source>
    <document_content>&lt;![CDATA[// src/app/api/auth/resend-verification/route.ts
import { NextResponse } from &quot;next/server&quot;;
import { prisma } from &quot;@/lib/prisma&quot;;
import crypto from 'crypto';
import { sendEmailWithRetry } from &quot;@/lib/email&quot;;
import VerificationEmail from &quot;@/emails/VerificationEmail&quot;;
import { createElement } from &quot;react&quot;;

export async function POST(request: Request) {
  try {
    const { email } = await request.json();

    const user = await prisma.user.findUnique({
      where: { email }
    });

    if (!user) {
      return NextResponse.json(
        { error: &quot;User not found&quot; },
        { status: 404 }
      );
    }

    if (user.emailVerified) {
      return NextResponse.json(
        { error: &quot;Email already verified&quot; },
        { status: 400 }
      );
    }

    // Check if we can send another email (e.g., rate limiting)
    const lastAttempt = user.emailVerificationLastAttempt;
    if (lastAttempt &amp;&amp; Date.now() - lastAttempt.getTime() &lt; 60000) { // 1 minute cooldown
      return NextResponse.json(
        { error: &quot;Please wait before requesting another verification email&quot; },
        { status: 429 }
      );
    }

    // Generate new token
    const newToken = crypto.randomBytes(32).toString('hex');
    const hashedToken = crypto
      .createHash('sha256')
      .update(newToken)
      .digest('hex');

    // Update user with new token
    await prisma.user.update({
      where: { id: user.id },
      data: {
        verificationToken: hashedToken,
        emailVerificationAttempts: {
          increment: 1
        },
        emailVerificationLastAttempt: new Date(),
        emailVerificationStatus: 'PENDING'
      }
    });

    // Send new verification email
    try {
      await sendEmailWithRetry({
        to: user.email,
        subject: &quot;Verify your email address&quot;,
        react: createElement(VerificationEmail, {
          verificationUrl: `${process.env.NEXT_PUBLIC_APP_URL}/verify-email?token=${newToken}`,
          userName: user.name ?? ''
        })
      });

      await prisma.user.update({
        where: { id: user.id },
        data: {
          emailVerificationStatus: 'SENT'
        }
      });

      return NextResponse.json({
        success: true,
        message: &quot;Verification email sent successfully&quot;
      });

    } catch (error) {
      await prisma.user.update({
        where: { id: user.id },
        data: {
          emailVerificationStatus: 'FAILED'
        }
      });

      throw error;
    }

  } catch {
    return NextResponse.json(
      { error: &quot;Failed to resend verification email&quot; },
      { status: 500 }
    );
  }
}]]&gt;</document_content>
  </document>
  <document index="50">
    <source>src/app/api/auth/forgot-password/route.ts</source>
    <document_content>&lt;![CDATA[// src/app/api/auth/forgot-password/route.ts

import { prisma } from '@/lib/prisma'
import { NextResponse } from 'next/server'
import crypto from 'crypto'
import { sendEmail } from '@/lib/email'

export async function POST(req: Request) {
  try {
    const { email } = await req.json()

    const user = await prisma.user.findUnique({
      where: { email }
    })

    // Always return success even if user doesn't exist (security best practice)
    if (!user) {
      return NextResponse.json({ success: true })
    }

    // Generate reset token and set expiry
    const passwordResetToken = crypto.randomBytes(32).toString('hex')
    const hashedToken = crypto
      .createHash('sha256')
      .update(passwordResetToken)
      .digest('hex')

    // Update user with reset token
    await prisma.user.update({
      where: { id: user.id },
      data: {
        passwordResetToken: hashedToken,
        passwordResetExpires: new Date(Date.now() + 3600000), // 1 hour from now
      }
    })

    // Create reset URL
    const resetUrl = `${process.env.NEXT_PUBLIC_APP_URL}/reset-password?token=${passwordResetToken}`

    // Send email
    await sendEmail({
      to: user.email,
      subject: 'Reset your password',
      html: `
        &lt;div style=&quot;font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;&quot;&gt;
          &lt;h2&gt;Reset Your Password&lt;/h2&gt;
          &lt;p&gt;Hi ${user.name || 'there'},&lt;/p&gt;
          &lt;p&gt;Click the button below to reset your password:&lt;/p&gt;
          &lt;div style=&quot;text-align: center; margin: 30px 0;&quot;&gt;
            &lt;a href=&quot;${resetUrl}&quot; style=&quot;background-color: #FF4D00; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;&quot;&gt;
              Reset Password
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;p&gt;If you did not request this, please ignore this email.&lt;/p&gt;
          &lt;p&gt;This reset link will expire in 1 hour.&lt;/p&gt;
        &lt;/div&gt;
      `
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Password reset error:', error)
    return NextResponse.json(
      { error: 'Failed to process password reset request' },
      { status: 500 }
    )
  }
}]]&gt;</document_content>
  </document>
  <document index="51">
    <source>src/app/api/auth/[...nextauth]/route.ts</source>
    <document_content>&lt;![CDATA[import NextAuth from &quot;next-auth&quot;
import { authOptions } from &quot;@/lib/auth&quot;


const handler = NextAuth(authOptions)
export { handler as GET, handler as POST }]]&gt;</document_content>
  </document>
  <document index="52">
    <source>src/app/api/auth/verify-email/route.ts</source>
    <document_content>&lt;![CDATA[// src/app/api/auth/verify-email/route.ts
import { prisma } from &quot;@/lib/prisma&quot;;
import { NextResponse } from &quot;next/server&quot;;
import crypto from 'crypto';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const rawToken = searchParams.get('token');

    // console.log('Received raw token for verification:', rawToken);

    if (!rawToken) {
      return NextResponse.json(
        { error: &quot;Verification token is required&quot; },
        { status: 400 }
      );
    }

    // Hash the received raw token
    const hashedToken = crypto
      .createHash('sha256')
      .update(rawToken)
      .digest('hex');

    // console.log('Computed hash from raw token:', hashedToken);

    // Find user with this hashed token
    const user = await prisma.user.findFirst({
      where: { 
        verificationToken: hashedToken,
        emailVerified: false
      }
    });

    // console.log('Found user:', user ? 'Yes' : 'No');

    if (!user) {
      return NextResponse.json(
        { 
          error: &quot;Invalid verification token&quot;,
          details: &quot;User not found or already verified&quot;
        },
        { status: 400 }
      );
    }

    // Update user
    await prisma.user.update({
      where: { id: user.id },
      data: {
        emailVerified: true,
        verificationToken: null
      }
    });

    // console.log('User verified successfully');

    // Return success JSON instead of redirecting
    return NextResponse.json({ 
      success: true,
      message: &quot;Email verified successfully&quot; 
    });

  } catch (error) {
    console.error(&quot;Email verification error:&quot;, error);
    return NextResponse.json(
      { 
        error: &quot;Failed to verify email&quot;,
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}]]&gt;</document_content>
  </document>
  <document index="53">
    <source>src/app/api/auth/register/business/route.ts</source>
    <document_content>&lt;![CDATA[// src/app/api/auth/register/business/route.ts
import { prisma } from &quot;@/lib/prisma&quot;
import { hash } from &quot;bcryptjs&quot;
import { NextResponse } from &quot;next/server&quot;
import { z } from &quot;zod&quot;
import { Prisma } from '.prisma/client'
import crypto from 'crypto'
import { sendEmail } from '@/lib/email'
import { createElement } from 'react';
import VerificationEmail from '@/components/emails/VerificationEmail';

type PrismaErrorTarget = {
  target?: string[];
};

const businessRegistrationSchema = z.object({
  // Personal Info
  fullName: z.string().min(2, &quot;Full name must be at least 2 characters&quot;),
  email: z.string().email(&quot;Invalid email address&quot;),
  password: z.string().min(8, &quot;Password must be at least 8 characters&quot;),
  confirmPassword: z.string(),
  
  // Business Info
  businessName: z.string().min(2, &quot;Business name must be at least 2 characters&quot;),
  businessCategory: z.string().min(1, &quot;Business category is required&quot;),
  phoneNumber: z.string().regex(/^(\+\d{1,3}[- ]?)?\d{10}$/, &quot;Invalid phone number&quot;),
  website: z.string().url().nullish().or(z.literal(&quot;&quot;)),

  // Location &amp; Hours
  address: z.string().min(5, &quot;Address must be at least 5 characters&quot;),
  city: z.string().min(2, &quot;City is required&quot;),
  county: z.string().min(2, &quot;County is required&quot;),
  eircode: z.string().optional().nullable(),
  openingHours: z.record(z.object({
    isOpen: z.boolean(),
    start: z.string().optional(),
    end: z.string().optional(),
  }))
}).refine((data) =&gt; data.password === data.confirmPassword, {
  message: &quot;Passwords don't match&quot;,
  path: [&quot;confirmPassword&quot;],
});


// In your business registration route
async function sendVerificationEmail(email: string, token: string, name: string) {
  const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/verify-email?token=${token}`;
  
  try {
    const emailComponent = createElement(VerificationEmail, {
      verificationUrl,
      userName: name
    });

    const result = await sendEmail({
      to: email,
      subject: &quot;Verify your email address&quot;,
      react: emailComponent
    });

    console.log('Verification email result:', result);
    return result;
  } catch (error) {
    console.error('Error in sendVerificationEmail:', error);
    throw error;
  }
}

export async function POST(req: Request) {
  try {
    const data = await req.json()
    console.log(&quot;Received registration data:&quot;, data)

    const validatedData = businessRegistrationSchema.parse(data)
    console.log(&quot;Validation passed&quot;)

    // Check if user exists
    const existingUser = await prisma.user.findUnique({
      where: { 
        email: validatedData.email 
      },
      select: {
        id: true,
        email: true,
        emailVerified: true,
        passwordResetToken: true,
        passwordResetExpires: true
      }
    })

    if (existingUser) {
      if (!existingUser.emailVerified) {
        // If user exists but email not verified, we could:
        // 1. Either resend verification email
        // 2. Or tell them to verify their email
        return NextResponse.json({
          error: &quot;Please verify your email to complete registration&quot;,
          needsVerification: true
        }, { status: 400 })
      }
      return NextResponse.json({
        error: &quot;Email already registered&quot;
      }, { status: 400 })
    }

    // Hash password
    const hashedPassword = await hash(validatedData.password, 12)

    // Use transaction to create both user and business
    const result = await prisma.$transaction(async (tx: Prisma.TransactionClient) =&gt; {
      // console.log(&quot;Starting transaction&quot;)
      
      // Generate verification token
      const rawToken = crypto.randomBytes(32).toString('hex');
      const hashedToken = crypto
        .createHash('sha256')
        .update(rawToken)
        .digest('hex');

      // console.log('Generated raw token:', rawToken);
      // console.log('Hashed token for storage:', hashedToken);
      
      // Create user with hashed token
      const user = await tx.user.create({
        data: {
          email: validatedData.email,
          name: validatedData.fullName,
          password: hashedPassword,
          role: &quot;BUSINESS_OWNER&quot;,
          emailVerified: false,
          points: 0,
          verificationToken: hashedToken,
          passwordResetToken: null,
          passwordResetExpires: null
        }
      })
      // console.log(&quot;User created:&quot;, user.id)

      // Create business
      const business = await tx.business.create({
        data: {
          name: validatedData.businessName,
          category: validatedData.businessCategory,
          phone: validatedData.phoneNumber,
          website: validatedData.website || &quot;&quot;,
          address: validatedData.address,
          city: validatedData.city,
          county: validatedData.county,
          eircode: validatedData.eircode || &quot;&quot;,
          openingHours: validatedData.openingHours,
          ownerId: user.id
        }
      })
      // console.log(&quot;Business created:&quot;, business.id)

      await tx.user.update({
        where: { id: user.id },
        data: {
          emailVerificationStatus: 'PENDING',
          emailVerificationAttempts: 0
        }
      });

      return { user, business, rawToken }
    })

    // Send verification email
    try {
     /* const emailResult = */await sendVerificationEmail(
        result.user.email,
        result.rawToken, // Use the raw token for the email
        result.user.name ?? ''
      );
      
      // console.log(&quot;Verification email result:&quot;, emailResult);
      // console.log(&quot;Verification email sent successfully&quot;, emailResult);
    } catch (error) {
      // console.error(&quot;Failed to send verification email:&quot;, error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error('Unknown error during email verification');
    }

  return NextResponse.json({
    success: true,
    businessId: result.business.id,
    message: &quot;Business registered successfully. Please check your email to verify your account.&quot;
  }, { status: 201 })

} catch (error) {
  console.error(&quot;Business registration error:&quot;, error)
  
  if (error instanceof z.ZodError) {
    return NextResponse.json({
      error: &quot;Validation failed&quot;,
      details: error.errors.map(e =&gt; ({
        field: e.path.join('.'),
        message: e.message
      }))
    }, { status: 400 })
  }

if (error instanceof Prisma.PrismaClientKnownRequestError) {
  if (error.code === 'P2002') {
    const meta = error.meta as PrismaErrorTarget;
    const target = meta?.target?.[0];
    return NextResponse.json({
      error: target === 'email' 
        ? &quot;A user with this email already exists&quot;
        : &quot;Please try again&quot;
    }, { status: 400 })
  }
}

  return NextResponse.json({
    error: &quot;Failed to register business. Please try again later.&quot;
  }, { status: 500 })
}
}]]&gt;</document_content>
  </document>
  <document index="54">
    <source>src/app/verify-email/success/page.tsx</source>
    <document_content>&lt;![CDATA[// src/app/verify-email/success/page.tsx
import Link from 'next/link';

export default function VerificationSuccessPage() {
  return (
    &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
      &lt;div className=&quot;max-w-md w-full space-y-8 text-center&quot;&gt;
        &lt;div className=&quot;rounded-full bg-green-100 p-3 mx-auto w-16 h-16&quot;&gt;
          &lt;svg
            className=&quot;w-10 h-10 text-green-600&quot;
            fill=&quot;none&quot;
            stroke=&quot;currentColor&quot;
            viewBox=&quot;0 0 24 24&quot;
          &gt;
            &lt;path
              strokeLinecap=&quot;round&quot;
              strokeLinejoin=&quot;round&quot;
              strokeWidth=&quot;2&quot;
              d=&quot;M5 13l4 4L19 7&quot;
            /&gt;
          &lt;/svg&gt;
        &lt;/div&gt;
        
        &lt;h2 className=&quot;mt-6 text-3xl font-extrabold text-gray-900&quot;&gt;
          Email Verified Successfully!
        &lt;/h2&gt;
        
        &lt;p className=&quot;mt-2 text-sm text-gray-600&quot;&gt;
          Thank you for verifying your email. You can now log in to your account.
        &lt;/p&gt;

        &lt;div className=&quot;mt-5&quot;&gt;
          &lt;Link
            href=&quot;/login&quot;
            className=&quot;inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary&quot;
          &gt;
            Go to Login
          &lt;/Link&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}]]&gt;</document_content>
  </document>
  <document index="55">
    <source>src/app/business/dashboard/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'

export default function BusinessDashboardPage() {
  const { data: session } = useSession()
  const router = useRouter()

  if (!session?.user || session.user.role !== 'BUSINESS_OWNER') {
    router.replace('/dashboard')
    return null
  }

  return (
    &lt;div className=&quot;min-h-screen p-4&quot;&gt;
      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Business Dashboard&lt;/h1&gt;
      &lt;div className=&quot;bg-white rounded-lg shadow p-4&quot;&gt;
        &lt;p&gt;Welcome, {session.user.name}&lt;/p&gt;
        &lt;p&gt;Role: {session.user.role}&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="56">
    <source>src/app/(auth)/register/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useState } from 'react'
import BusinessRegistrationModal from '@/components/BusinessRegistrationModal'

export default function Home() {
  const [showRegistration, setShowRegistration] = useState(false)

  return (
    &lt;div className=&quot;min-h-screen p-4&quot;&gt;
      &lt;div className=&quot;max-w-7xl mx-auto&quot;&gt;
        &lt;header className=&quot;flex justify-between items-center py-4&quot;&gt;
          &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Huubr&lt;/h1&gt;
          &lt;button
            onClick={() =&gt; setShowRegistration(true)}
            className=&quot;bg-[#FF4D00] text-white px-4 py-2 rounded-lg&quot;
          &gt;
            List your Business
          &lt;/button&gt;
        &lt;/header&gt;

        {/* Reset key when modal closes to ensure fresh state */}
        &lt;BusinessRegistrationModal 
          key={showRegistration ? 'open' : 'closed'}
          isOpen={showRegistration}
          onClose={() =&gt; setShowRegistration(false)}
        /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="57">
    <source>src/app/(auth)/reset-password/page.tsx</source>
    <document_content>&lt;![CDATA[// src/app/(auth)/reset-password/page.tsx
'use client'

import { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { useForm } from 'react-hook-form'
import { toast } from 'react-hot-toast'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import Button from '@/components/Button'
import Link from 'next/link'

const resetPasswordSchema = z.object({
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
    .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
    .regex(/[0-9]/, 'Password must contain at least one number'),
  confirmPassword: z.string()
}).refine((data) =&gt; data.password === data.confirmPassword, {
  message: &quot;Passwords don't match&quot;,
  path: [&quot;confirmPassword&quot;],
})

type ResetPasswordFormData = z.infer&lt;typeof resetPasswordSchema&gt;

export default function ResetPasswordPage() {
  const [loading, setLoading] = useState(false)
  const router = useRouter()
  const searchParams = useSearchParams()
  const token = searchParams.get('token')

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm&lt;ResetPasswordFormData&gt;({
    resolver: zodResolver(resetPasswordSchema),
  })

  const onSubmit = async (data: ResetPasswordFormData) =&gt; {
    if (!token) {
      toast.error('Reset token is missing')
      return
    }

    setLoading(true)
    try {
      const response = await fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          token,
          password: data.password,
        })
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to reset password')
      }

      toast.success('Password has been reset successfully')
      router.push('/login')
    } catch (error) {
      console.error('Reset password error:', error)
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Failed to reset password'
      )
    } finally {
      setLoading(false)
    }
  }

  if (!token) {
    return (
      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4&quot;&gt;
        &lt;div className=&quot;text-center&quot;&gt;
          &lt;h2 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Invalid Reset Link&lt;/h2&gt;
          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;
            This password reset link is invalid or has expired.
          &lt;/p&gt;
          &lt;div className=&quot;mt-6&quot;&gt;
            &lt;Link
              href=&quot;/forgot-password&quot;
              className=&quot;text-primary hover:text-primary/90&quot;
            &gt;
              Request a new reset link
            &lt;/Link&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }

  return (
    &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;
        &lt;div&gt;
          &lt;h2 className=&quot;mt-6 text-center text-3xl font-extrabold text-gray-900&quot;&gt;
            Reset your password
          &lt;/h2&gt;
          &lt;p className=&quot;mt-2 text-center text-sm text-gray-600&quot;&gt;
            Please enter your new password below
          &lt;/p&gt;
        &lt;/div&gt;

        &lt;form className=&quot;mt-8 space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;
          &lt;div className=&quot;rounded-md shadow-sm space-y-4&quot;&gt;
            &lt;div&gt;
              &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;
                New Password
              &lt;/label&gt;
              &lt;input
                {...register('password')}
                type=&quot;password&quot;
                id=&quot;password&quot;
                className=&quot;mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary&quot;
                placeholder=&quot;Enter your new password&quot;
              /&gt;
              {errors.password &amp;&amp; (
                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.password.message}&lt;/p&gt;
              )}
            &lt;/div&gt;

            &lt;div&gt;
              &lt;label htmlFor=&quot;confirmPassword&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;
                Confirm Password
              &lt;/label&gt;
              &lt;input
                {...register('confirmPassword')}
                type=&quot;password&quot;
                id=&quot;confirmPassword&quot;
                className=&quot;mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary&quot;
                placeholder=&quot;Confirm your new password&quot;
              /&gt;
              {errors.confirmPassword &amp;&amp; (
                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.confirmPassword.message}&lt;/p&gt;
              )}
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;Button
            type=&quot;submit&quot;
            variant=&quot;primary&quot;
            className=&quot;w-full&quot;
            isLoading={loading}
          &gt;
            Reset Password
          &lt;/Button&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="58">
    <source>src/app/(auth)/forgot-password/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { motion } from 'framer-motion'
import { toast } from 'react-hot-toast'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import Button from '@/components/Button'
import Link from 'next/link'

const forgotPasswordSchema = z.object({
  email: z.string().email('Please enter a valid email')
})

type ForgotPasswordFormData = z.infer&lt;typeof forgotPasswordSchema&gt;

export default function ForgotPasswordPage() {
  const [loading, setLoading] = useState(false)
  const [emailSent, setEmailSent] = useState(false)

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors }
  } = useForm&lt;ForgotPasswordFormData&gt;({
    resolver: zodResolver(forgotPasswordSchema),
    defaultValues: {
      email: ''
    }
  })

  const onSubmit = async (data: ForgotPasswordFormData) =&gt; {
    setLoading(true)
    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        throw new Error('Failed to send reset instructions')
      }

      setEmailSent(true)
      toast.success('Password reset instructions have been sent to your email')
    } catch {
      toast.error('Failed to send reset instructions. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  if (emailSent) {
    return (
      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
        &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;
          &lt;motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className=&quot;text-center&quot;
          &gt;
            &lt;div className=&quot;mx-auto w-12 h-12 text-green-500 mb-4&quot;&gt;
              &lt;svg fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke=&quot;currentColor&quot;&gt;
                &lt;path
                  strokeLinecap=&quot;round&quot;
                  strokeLinejoin=&quot;round&quot;
                  strokeWidth={2}
                  d=&quot;M3 19v-8.93a2 2 0 01.89-1.664l7-4.666a2 2 0 012.22 0l7 4.666A2 2 0 0121 10.07V19M3 19a2 2 0 002 2h14a2 2 0 002-2M3 19l6.75-4.5M21 19l-6.75-4.5M3 10l6.75 4.5M21 10l-6.75 4.5m0 0l-1.14.76a2 2 0 01-2.22 0l-1.14-.76&quot;
                /&gt;
              &lt;/svg&gt;
            &lt;/div&gt;
            &lt;h2 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Check your email&lt;/h2&gt;
            &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;
              We&amp;apos;ve sent password reset instructions to {watch('email')}
            &lt;/p&gt;
            &lt;div className=&quot;mt-6&quot;&gt;
              &lt;Link
                href=&quot;/login&quot;
                className=&quot;text-primary hover:text-primary/90 font-medium&quot;
              &gt;
                Back to login
              &lt;/Link&gt;
            &lt;/div&gt;
          &lt;/motion.div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }

  return (
    &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;
        &lt;div&gt;
          &lt;h2 className=&quot;mt-6 text-center text-3xl font-extrabold text-gray-900&quot;&gt;
            Reset your password
          &lt;/h2&gt;
          &lt;p className=&quot;mt-2 text-center text-sm text-gray-600&quot;&gt;
            Enter your email address and we&amp;apos;ll send you instructions to reset your password.
          &lt;/p&gt;
        &lt;/div&gt;

        &lt;form className=&quot;mt-8 space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;
          &lt;div className=&quot;rounded-md shadow-sm space-y-4&quot;&gt;
            &lt;div&gt;
              &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;
                Email Address
              &lt;/label&gt;
              &lt;input
                {...register('email')}
                type=&quot;email&quot;
                id=&quot;email&quot;
                autoComplete=&quot;email&quot;
                required
                className=&quot;mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary&quot;
                placeholder=&quot;your.email@example.com&quot;
              /&gt;
              {errors.email &amp;&amp; (
                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.email.message}&lt;/p&gt;
              )}
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;div&gt;
            &lt;Button
              type=&quot;submit&quot;
              variant=&quot;primary&quot;
              className=&quot;w-full&quot;
              isLoading={loading}
            &gt;
              Send reset instructions
            &lt;/Button&gt;
          &lt;/div&gt;

          &lt;div className=&quot;text-center&quot;&gt;
            &lt;Link
              href=&quot;/login&quot;
              className=&quot;text-sm text-primary hover:text-primary/90 font-medium&quot;
            &gt;
              Back to login
            &lt;/Link&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="59">
    <source>src/app/(auth)/login/page.tsx</source>
    <document_content>&lt;![CDATA['use client'
import { useState } from 'react'
import { signIn } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useForm } from 'react-hook-form'
import { toast } from 'react-hot-toast'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import Button from '@/components/Button'
import Link from 'next/link'
import { getRedirectUrl } from '@/lib/auth-utils'
import { AuthInput } from '@/components/auth/AuthInput'
import { SocialLoginButtons } from '@/components/auth/SocialLoginButtons'

const loginSchema = z.object({
  email: z.string().email('Please enter a valid email'),
  password: z.string().min(1, 'Password is required')
})

type LoginFormData = z.infer&lt;typeof loginSchema&gt;

export default function LoginPage() {
  const [loading, setLoading] = useState(false)
  const router = useRouter()

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm&lt;LoginFormData&gt;({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: ''
    }
  })
  
  const onSubmit = async (data: LoginFormData) =&gt; {
    setLoading(true)
    try {
      const result = await signIn('credentials', {
        redirect: false,
        email: data.email,
        password: data.password
      })
  
      if (result?.error) {
        toast.error(result.error)
        return
      }
  
      const response = await fetch('/api/auth/session')
      const session = await response.json()
  
      toast.success('Logged in successfully!')
      
      const redirectUrl = getRedirectUrl(session?.user?.role)
      router.push(redirectUrl)
      router.refresh()
  
    } catch (error) {
      console.error('Login failed:', error)
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Login failed. Please try again.'
      )
    } finally {
      setLoading(false)
    }
  }

  return (
    &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8&quot;&gt;
      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;
        &lt;div&gt;
          &lt;h2 className=&quot;mt-6 text-center text-3xl font-extrabold text-gray-900&quot;&gt;
            Sign in to your account
          &lt;/h2&gt;
          &lt;p className=&quot;mt-2 text-center text-sm text-gray-600&quot;&gt;
            Or{' '}
            &lt;Link
              href=&quot;/register&quot;
              className=&quot;font-medium text-primary hover:text-primary/90&quot;
            &gt;
              create a new account
            &lt;/Link&gt;
          &lt;/p&gt;
        &lt;/div&gt;

        &lt;form className=&quot;mt-8 space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;
          &lt;div className=&quot;rounded-md shadow-sm space-y-4&quot;&gt;
            &lt;AuthInput
              id=&quot;email&quot;
              label=&quot;Email Address&quot;
              type=&quot;email&quot;
              register={register}
              error={errors.email?.message}
              placeholder=&quot;your.email@example.com&quot;
              autoComplete=&quot;email&quot;
            /&gt;

            &lt;AuthInput
              id=&quot;password&quot;
              label=&quot;Password&quot;
              type=&quot;password&quot;
              register={register}
              error={errors.password?.message}
              placeholder=&quot;Enter your password&quot;
              autoComplete=&quot;current-password&quot;
            /&gt;
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center justify-between&quot;&gt;
            &lt;div className=&quot;text-sm&quot;&gt;
              &lt;Link
                href=&quot;/forgot-password&quot;
                className=&quot;font-medium text-primary hover:text-primary/90&quot;
              &gt;
                Forgot your password?
              &lt;/Link&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;Button
            type=&quot;submit&quot;
            variant=&quot;primary&quot;
            className=&quot;w-full&quot;
            isLoading={loading}
          &gt;
            Sign in
          &lt;/Button&gt;
        &lt;/form&gt;

        &lt;SocialLoginButtons /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="60">
    <source>src/app/customer/dashboard/page.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'

export default function CustomerDashboardPage() {
  const { data: session } = useSession()
  const router = useRouter()

  if (!session?.user || session.user.role !== 'CUSTOMER') {
    router.replace('/dashboard')
    return null
  }

  return (
    &lt;div className=&quot;min-h-screen p-4&quot;&gt;
      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Customer Dashboard&lt;/h1&gt;
      &lt;div className=&quot;bg-white rounded-lg shadow p-4&quot;&gt;
        &lt;p&gt;Welcome, {session.user.name}&lt;/p&gt;
        &lt;p&gt;Role: {session.user.role}&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="61">
    <source>src/components/auth/SocialLoginButtons.tsx</source>
    <document_content>&lt;![CDATA[import { getSession, signIn } from 'next-auth/react'
import Button from '@/components/Button'
import toast from 'react-hot-toast'
import { getRedirectUrl } from '@/lib/auth-utils'
import router from 'next/router'

interface SocialLoginButtonsProps {
  callbackUrl?: string
}

export function SocialLoginButtons({ callbackUrl = '/dashboard' }: SocialLoginButtonsProps) {
const handleSocialLogin = async (provider: string) =&gt; {
    try {
        const result = await signIn(provider, {
        redirect: false,
        })
    
        if (result?.error) {
        toast.error(result.error)
        return
        }
    
        if (result?.ok) {
        const session = await getSession()
        const redirectUrl = getRedirectUrl(session?.user?.role)
        router.push(redirectUrl)
        toast.success('Signed in successfully!')
        }
    } catch (error) {
        console.error('Social login error:', error)
        toast.error('Failed to sign in with social provider')
    }
    }
  return (
    &lt;div className=&quot;mt-6&quot;&gt;
      &lt;div className=&quot;relative&quot;&gt;
        &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;
          &lt;div className=&quot;w-full border-t border-gray-300&quot; /&gt;
        &lt;/div&gt;
        &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;
          &lt;span className=&quot;px-2 bg-gray-50 text-gray-500&quot;&gt;
            Or continue with
          &lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div className=&quot;mt-6 grid grid-cols-3 gap-3&quot;&gt;
        &lt;Button
          type=&quot;button&quot;
          variant=&quot;outline&quot;
          onClick={() =&gt; handleSocialLogin('google')}
          className=&quot;w-full flex items-center justify-center&quot;
        &gt;
          &lt;span className=&quot;sr-only&quot;&gt;Sign in with Google&lt;/span&gt;
          &lt;svg className=&quot;h-5 w-5&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;
            &lt;path d=&quot;M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z&quot;/&gt;
          &lt;/svg&gt;
        &lt;/Button&gt;

        &lt;Button
          type=&quot;button&quot;
          variant=&quot;outline&quot;
          onClick={() =&gt; handleSocialLogin('facebook')}
          className=&quot;w-full flex items-center justify-center&quot;
        &gt;
          &lt;span className=&quot;sr-only&quot;&gt;Sign in with Facebook&lt;/span&gt;
          &lt;svg className=&quot;h-5 w-5&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;
            &lt;path d=&quot;M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z&quot;/&gt;
          &lt;/svg&gt;
        &lt;/Button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="62">
    <source>src/components/auth/AuthInput.tsx</source>
    <document_content>&lt;![CDATA[import { FieldValues, UseFormRegister, Path } from 'react-hook-form'

interface AuthInputProps&lt;T extends FieldValues&gt; {
id: Path&lt;T&gt;;
label: string;
type?: string;
register: UseFormRegister&lt;T&gt;;
error?: string;
placeholder?: string;
autoComplete?: string;
}


export function AuthInput&lt;T extends FieldValues&gt;({
  id,
  label,
  type = 'text',
  register,
  error,
  placeholder,
  autoComplete,
}: AuthInputProps&lt;T&gt;) {
  return (
    &lt;div&gt;
      &lt;label htmlFor={id} className=&quot;block text-sm font-medium text-gray-700&quot;&gt;
        {label}
      &lt;/label&gt;
      &lt;input
        {...register(id)}
        type={type}
        id={id}
        autoComplete={autoComplete}
        className=&quot;mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary&quot;
        placeholder={placeholder}
      /&gt;
      {error &amp;&amp; (
        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{error}&lt;/p&gt;
      )}
    &lt;/div&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="63">
    <source>src/components/ui/modal.tsx</source>
    <document_content>&lt;![CDATA['use client'

import { Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { X } from 'lucide-react'

interface ModalProps {
  isOpen: boolean
  onClose: () =&gt; void
  children: React.ReactNode
  title?: string
}

export function Modal({ isOpen, onClose, children, title }: ModalProps) {
  return (
    &lt;Transition appear show={isOpen} as={Fragment}&gt;
      &lt;Dialog as=&quot;div&quot; className=&quot;relative z-50&quot; onClose={onClose}&gt;
        &lt;Transition.Child
          as={Fragment}
          enter=&quot;ease-out duration-300&quot;
          enterFrom=&quot;opacity-0&quot;
          enterTo=&quot;opacity-100&quot;
          leave=&quot;ease-in duration-200&quot;
          leaveFrom=&quot;opacity-100&quot;
          leaveTo=&quot;opacity-0&quot;
        &gt;
          &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50&quot; /&gt;
        &lt;/Transition.Child&gt;

        &lt;div className=&quot;fixed inset-0 overflow-y-auto&quot;&gt;
          &lt;div className=&quot;flex min-h-full items-center justify-center p-4&quot;&gt;
            &lt;Transition.Child
              as={Fragment}
              enter=&quot;ease-out duration-300&quot;
              enterFrom=&quot;opacity-0 scale-95&quot;
              enterTo=&quot;opacity-100 scale-100&quot;
              leave=&quot;ease-in duration-200&quot;
              leaveFrom=&quot;opacity-100 scale-100&quot;
              leaveTo=&quot;opacity-0 scale-95&quot;
            &gt;
              &lt;Dialog.Panel className=&quot;w-full max-w-2xl transform overflow-hidden rounded-2xl bg-white p-6 shadow-xl transition-all&quot;&gt;
                {title &amp;&amp; (
                  &lt;Dialog.Title
                    as=&quot;h3&quot;
                    className=&quot;text-lg font-medium leading-6 text-gray-900 mb-4&quot;
                  &gt;
                    {title}
                  &lt;/Dialog.Title&gt;
                )}
                &lt;div className=&quot;absolute right-4 top-4&quot;&gt;
                  &lt;button
                    type=&quot;button&quot;
                    className=&quot;rounded-md text-gray-400 hover:text-gray-500 focus:outline-none&quot;
                    onClick={onClose}
                  &gt;
                    &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;
                    &lt;X className=&quot;h-6 w-6&quot; aria-hidden=&quot;true&quot; /&gt;
                  &lt;/button&gt;
                &lt;/div&gt;
                {children}
              &lt;/Dialog.Panel&gt;
            &lt;/Transition.Child&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/Dialog&gt;
    &lt;/Transition&gt;
  )
}]]&gt;</document_content>
  </document>
  <document index="64">
    <source>src/components/ui/input.tsx</source>
    <document_content>&lt;![CDATA[import * as React from &quot;react&quot;
import { cn } from &quot;@/lib/utils&quot;

export interface InputProps
  extends React.InputHTMLAttributes&lt;HTMLInputElement&gt; {
  error?: string;
}

const Input = React.forwardRef&lt;HTMLInputElement, InputProps&gt;(
  ({ className, type, error, ...props }, ref) =&gt; {
    return (
      &lt;div className=&quot;relative&quot;&gt;
        &lt;input
          type={type}
          className={cn(
            &quot;flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50&quot;,
            error &amp;&amp; &quot;border-red-500&quot;,
            className
          )}
          ref={ref}
          {...props}
        /&gt;
        {error &amp;&amp; (
          &lt;p className=&quot;mt-1 text-xs text-red-500&quot;&gt;{error}&lt;/p&gt;
        )}
      &lt;/div&gt;
    )
  }
)
Input.displayName = &quot;Input&quot;

export { Input }]]&gt;</document_content>
  </document>
  <document index="65">
    <source>src/components/ui/select.tsx</source>
    <document_content>&lt;![CDATA[import * as React from &quot;react&quot;
import { cn } from &quot;@/lib/utils&quot;

export interface SelectProps
  extends React.SelectHTMLAttributes&lt;HTMLSelectElement&gt; {
  error?: string;
}

const Select = React.forwardRef&lt;HTMLSelectElement, SelectProps&gt;(
  ({ className, children, error, ...props }, ref) =&gt; {
    return (
      &lt;div className=&quot;relative&quot;&gt;
        &lt;select
          className={cn(
            &quot;flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50&quot;,
            error &amp;&amp; &quot;border-red-500&quot;,
            className
          )}
          ref={ref}
          {...props}
        &gt;
          {children}
        &lt;/select&gt;
        {error &amp;&amp; (
          &lt;p className=&quot;mt-1 text-xs text-red-500&quot;&gt;{error}&lt;/p&gt;
        )}
      &lt;/div&gt;
    )
  }
)
Select.displayName = &quot;Select&quot;

export { Select }]]&gt;</document_content>
  </document>
  <document index="66">
    <source>src/components/ui/checkbox.tsx</source>
    <document_content>&lt;![CDATA[import * as React from &quot;react&quot;
import * as CheckboxPrimitive from &quot;@radix-ui/react-checkbox&quot;
import { Check } from &quot;lucide-react&quot;

import { cn } from &quot;@/lib/utils&quot;

const Checkbox = React.forwardRef&lt;
  React.ElementRef&lt;typeof CheckboxPrimitive.Root&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CheckboxPrimitive.Root&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      &quot;peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground&quot;,
      className
    )}
    {...props}
  &gt;
    &lt;CheckboxPrimitive.Indicator
      className={cn(&quot;flex items-center justify-center text-current&quot;)}
    &gt;
      &lt;Check className=&quot;h-4 w-4&quot; /&gt;
    &lt;/CheckboxPrimitive.Indicator&gt;
  &lt;/CheckboxPrimitive.Root&gt;
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }]]&gt;</document_content>
  </document>
  <document index="67">
    <source>src/components/emails/VerificationEmail.tsx</source>
    <document_content>&lt;![CDATA[// src/components/emails/VerificationEmail.tsx
import {
  Body,
  Button,
  Container,
  Head,
  Hr,
  Html,
  Preview,
  Section,
  Text,
} from '@react-email/components';
import * as React from 'react';

interface VerificationEmailProps {
  verificationUrl: string;
  userName?: string;
}

export const VerificationEmail = ({
  verificationUrl,
  userName = '',
}: VerificationEmailProps) =&gt; {
  return (
    &lt;Html&gt;
      &lt;Head /&gt;
      &lt;Preview&gt;Verify your email address for Huubr&lt;/Preview&gt;
      &lt;Body style={styles.body}&gt;
        &lt;Container style={styles.container}&gt;
          &lt;Text style={styles.title}&gt;Welcome to Huubr!&lt;/Text&gt;
          &lt;Text style={styles.text}&gt;
            Hi {userName ? userName : 'there'},
          &lt;/Text&gt;
          &lt;Text style={styles.text}&gt;
            Thank you for registering your business. Please verify your email address by
            clicking the button below:
          &lt;/Text&gt;
          &lt;Section style={styles.buttonContainer}&gt;
            &lt;Button 
              href={verificationUrl}
              style={styles.button}
            &gt;
              Verify Email
            &lt;/Button&gt;
          &lt;/Section&gt;
          &lt;Text style={styles.text}&gt;
            Or copy and paste this URL into your browser:
          &lt;/Text&gt;
          &lt;Text style={styles.link}&gt;
            {verificationUrl}
          &lt;/Text&gt;
          &lt;Hr style={styles.hr} /&gt;
          &lt;Text style={styles.footer}&gt;
            This link will expire in 24 hours. If you did not create an account,
            you can safely ignore this email.
          &lt;/Text&gt;
        &lt;/Container&gt;
      &lt;/Body&gt; 
    &lt;/Html&gt;
  );
};

const styles = {
  body: {
    backgroundColor: '#ffffff',
    fontFamily: '-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,Oxygen-Sans,Ubuntu,Cantarell,&quot;Helvetica Neue&quot;,sans-serif',
  },
  container: {
    margin: '0 auto',
    padding: '20px 0 48px',
  },
  title: {
    fontSize: '24px',
    fontWeight: 'bold',
    marginBottom: '16px',
  },
  text: {
    fontSize: '16px',
    lineHeight: '26px',
    color: '#333',
  },
  buttonContainer: {
    marginTop: '32px',
    marginBottom: '32px',
  },
  button: {
    backgroundColor: '#A4C639',
    borderRadius: '4px',
    color: '#fff',
    fontSize: '16px',
    fontWeight: 'bold',
    textDecoration: 'none',
    textAlign: 'center' as const,
    display: 'block',
    padding: '12px 24px',
  },
  link: {
    fontSize: '14px',
    color: '#2563eb',
    wordBreak: 'break-all' as const,
  },
  hr: {
    borderColor: '#e5e7eb',
    margin: '16px 0',
  },
  footer: {
    fontSize: '14px',
    color: '#666666',
    marginTop: '32px',
  },
} as const;

export default VerificationEmail;]]&gt;</document_content>
  </document>
</documents>
